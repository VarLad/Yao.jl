var documenterSearchIndex = {"docs":
[{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"DocTestSetup = quote\n    using Yao\n    using Yao: YaoBase, YaoBlocks, YaoArrayRegister\n    using YaoBase\n    using YaoBlocks\n    using YaoArrayRegister\nend","category":"page"},{"location":"man/blocks.html#Blocks","page":"Blocks","title":"Blocks","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Blocks are the basic building blocks of a quantum circuit in Yao. It simply means a quantum operator, thus, all the blocks have matrices in principal and one can get its matrix by mat. The basic blocks required to build an arbitrary quantum circuit is defined in the component package YaoBlocks.","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Block Tree serves as an intermediate representation for Yao to analysis, optimize the circuit, then it will be lowered to instructions like for simulations, blocks will be lowered to instruct! calls.","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"The structure of blocks is the same with a small type system, it consists of two basic kinds of blocks: CompositeBlock (like composite types), and PrimitiveBlock (like primitive types). By combining these two kinds of blocks together, we'll be able to construct a quantum circuit and represent it in a tree data structure.","category":"page"},{"location":"man/blocks.html#Primitive-Blocks","page":"Blocks","title":"Primitive Blocks","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Primitive blocks are subtypes of PrimitiveBlock, they are the leaf nodes in a block tree, thus primitive types do not have subtypes.","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"We provide the following primitive blocks:","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Modules = [YaoBlocks]\nFilter = t ->(t isa Type && t <: YaoBlocks.PrimitiveBlock)","category":"page"},{"location":"man/blocks.html#YaoBlocks.GeneralMatrixBlock","page":"Blocks","title":"YaoBlocks.GeneralMatrixBlock","text":"GeneralMatrixBlock{M, N, MT} <: PrimitiveBlock{N}\n\nGeneral matrix gate wraps a matrix operator to quantum gates. This is the most general form of a quantum gate. M is the hilbert dimension (first dimension), N is the hilbert dimension (second dimension) of current quantum state. For most quantum gates, we have M = N.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.IdentityGate","page":"Blocks","title":"YaoBlocks.IdentityGate","text":"IdentityGate{N} <: TrivialGate{N}\n\nThe identity gate.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Measure","page":"Blocks","title":"YaoBlocks.Measure","text":"Measure{N, K, OT, LT, PT, RNG} <: PrimitiveBlock{N}\nMeasure(n::Int; rng=Random.GLOBAL_RNG, operator=ComputationalBasis(), locs=1:n, resetto=nothing, remove=false)\n\nMeasure operator.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Measure-Union{Tuple{Int64}, Tuple{RNG}, Tuple{LT}, Tuple{OT}} where {OT, LT, RNG}","page":"Blocks","title":"YaoBlocks.Measure","text":"Measure(n::Int; rng=Random.GLOBAL_RNG, operator=ComputationalBasis(), locs=AllLocs(), resetto=nothing, remove=false)\n\nCreate a Measure block with number of qubits n.\n\nExample\n\nYou can create a Measure block on given basis (default is the computational basis).\n\njulia> Measure(4)\nMeasure(4)\n\nOr you could specify which qubits you are going to measure\n\njulia> Measure(4; locs=1:3)\nMeasure(4;locs=(1, 2, 3))\n\nby default this will collapse the current register to measure results.\n\njulia> r = normalize!(ArrayReg(bit\"000\") + ArrayReg(bit\"111\"))\nArrayReg{1, ComplexF64, Array...}\n    active qubits: 3/3\n\njulia> state(r)\n8×1 Matrix{ComplexF64}:\n 0.7071067811865475 + 0.0im\n                0.0 + 0.0im\n                0.0 + 0.0im\n                0.0 + 0.0im\n                0.0 + 0.0im\n                0.0 + 0.0im\n                0.0 + 0.0im\n 0.7071067811865475 + 0.0im\n\njulia> r |> Measure(3)\nArrayReg{1, ComplexF64, Array...}\n    active qubits: 3/3\n\njulia> state(r)\n8×1 Matrix{ComplexF64}:\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 0.0 + 0.0im\n 1.0 + 0.0im\n\nBut you can also specify the target bit configuration you want to collapse to with keyword resetto.\n\n```jldoctest; setup=:(using YaoBlocks; using BitBasis) julia> m = Measure(4; resetto=bit\"0101\") Measure(4;postprocess=ResetTo{BitStr{4,Int64}}(0101 ₍₂₎))\n\njulia> m.postprocess ResetTo{BitStr{4,Int64}}(0101 ₍₂₎)```\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.PhaseGate","page":"Blocks","title":"YaoBlocks.PhaseGate","text":"PhiGate\n\nGlobal phase gate.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.RotationGate","page":"Blocks","title":"YaoBlocks.RotationGate","text":"RotationGate{N, T, GT <: AbstractBlock{N, Complex{T}}} <: PrimitiveBlock{N, Complex{T}}\n\nRotationGate, with GT both hermitian and isreflexive.\n\nDefinition\n\nmathbfI cos(θ  2) - im sin(θ  2) * mat(U)\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.ShiftGate","page":"Blocks","title":"YaoBlocks.ShiftGate","text":"ShiftGate <: PrimitiveBlock\n\nPhase shift gate.\n\nDefinition\n\nbeginpmatrix\n1  0\n0  e^(im θ)\nendpmatrix\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.TimeEvolution","page":"Blocks","title":"YaoBlocks.TimeEvolution","text":"TimeEvolution{N, TT, GT} <: PrimitiveBlock{N}\n\nTimeEvolution, where GT is block type. input matrix should be hermitian.\n\n!!!note:     TimeEvolution contructor check hermicity of the input block by default, but sometimes it can be slow. Turn off the check manually by specifying optional parameter check_hermicity = false.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#Composite-Blocks","page":"Blocks","title":"Composite Blocks","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Composite blocks are subtypes of CompositeBlock, they are the composition of blocks.","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"We provide the following composite blocks:","category":"page"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Modules = [YaoBlocks]\nFilter = t -> t isa Type && t <: YaoBlocks.CompositeBlock","category":"page"},{"location":"man/blocks.html#YaoBlocks.Add","page":"Blocks","title":"YaoBlocks.Add","text":"Add{N} <: CompositeBlock{N}\nAdd{N}(iterable) -> Add\nAdd(blocks::AbstractBlock{N}...) -> Add\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.CachedBlock","page":"Blocks","title":"YaoBlocks.CachedBlock","text":"CachedBlock{ST, BT, N} <: TagBlock{BT, N}\n\nA label type that tags an instance of type BT. It forwards every methods of the block it contains, except mat and apply!, it will cache the matrix form whenever the program has.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.ChainBlock","page":"Blocks","title":"YaoBlocks.ChainBlock","text":"ChainBlock{N} <: CompositeBlock{N}\n\nChainBlock is a basic construct tool to create user defined blocks horizontically. It is a Vector like composite type.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Daggered","page":"Blocks","title":"YaoBlocks.Daggered","text":"Daggered{BT, N} <: TagBlock{N}\n\nWrapper block allowing to execute the inverse of a block of quantum circuit.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Daggered-Union{Tuple{BT}, Tuple{N}} where {N, BT<:AbstractBlock{N}}","page":"Blocks","title":"YaoBlocks.Daggered","text":"Daggered(x)\n\nCreate a Daggered block with given block x.\n\nExample\n\nThe inverse QFT is not hermitian, thus it will be tagged with a Daggered block.\n\njulia> A(i, j) = control(i, j=>shift(2π/(1<<(i-j+1))));\n\njulia> B(n, i) = chain(n, i==j ? put(i=>H) : A(j, i) for j in i:n);\n\njulia> qft(n) = chain(B(n, i) for i in 1:n);\n\njulia> struct QFT{N} <: PrimitiveBlock{N} end\n\njulia> QFT(n) = QFT{n}();\n\njulia> circuit(::QFT{N}) where N = qft(N);\n\njulia> YaoBlocks.mat(x::QFT) = mat(circuit(x));\n\njulia> QFT(2)'\n [†]QFT{2}\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.KronBlock","page":"Blocks","title":"YaoBlocks.KronBlock","text":"KronBlock{N, T, MT<:AbstractBlock} <: CompositeBlock{N, T}\n\ncomposite block that combine blocks by kronecker product.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.PutBlock","page":"Blocks","title":"YaoBlocks.PutBlock","text":"PutBlock <: AbstractContainer\n\nType for putting a block at given locations.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.RepeatedBlock","page":"Blocks","title":"YaoBlocks.RepeatedBlock","text":"RepeatedBlock <: AbstractContainer\n\nRepeat the same block on given locations.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Scale","page":"Blocks","title":"YaoBlocks.Scale","text":"Scale{S <: Union{Number, Val}, N, BT <: AbstractBlock{N}} <: TagBlock{BT, N}\n\nScale a block with scalar. it can be either a Number or a compile time Val.\n\nExample\n\njulia> 2 * X\n[scale: 2] X\n\njulia> im * Z\n[+im] Z\n\njulia> -im * Z\n[-im] Z\n\njulia> -Z\n[-] Z\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.Subroutine","page":"Blocks","title":"YaoBlocks.Subroutine","text":"Subroutine{N, T, BT <: AbstractBlock} <: AbstractContainer{BT, N, T}\n\nSubroutine node on given locations. This allows you to shoehorn a smaller circuit to a larger one.\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#YaoBlocks.UnitaryChannel","page":"Blocks","title":"YaoBlocks.UnitaryChannel","text":"UnitaryChannel(operators[, weights])\n\nCreate a unitary channel, optionally weighted from an list of weights. The unitary channel is defined as below in Kraus representation\n\nϕ(ρ) = sum_i U_i ρ U_i^\n\nnote: Note\nUnitary channel will only normalize the weights when calculating the matrix form, thus you should be careful when you need this condition for other purpose.\n\nnote: Note\nwhen applying a UnitaryChannel on the register, a unitary will be sampled uniformly or optionally from given weights, then this unitary will be applied to the register. \n\nExample\n\njulia> UnitaryChannel([X, Y, Z])\nnqubits: 1\nunitary_channel\n├─ [1.0] X\n├─ [1.0] Y\n└─ [1.0] Z\n\nOr with weights\n\njulia> UnitaryChannel([X, Y, Z], [0.1, 0.2, 0.7])\nnqubits: 1\nunitary_channel\n├─ [0.1] X\n├─ [0.2] Y\n└─ [0.7] Z\n\n\n\n\n\n","category":"type"},{"location":"man/blocks.html#APIs","page":"Blocks","title":"APIs","text":"","category":"section"},{"location":"man/blocks.html","page":"Blocks","title":"Blocks","text":"Modules = [YaoBlocks]\nOrder = [:function, :macro]","category":"page"},{"location":"man/blocks.html#Base.:|>-Tuple{AbstractRegister, AbstractBlock}","page":"Blocks","title":"Base.:|>","text":"|>(register, blk)\n\nPipe operator for quantum circuits.\n\nExample\n\njulia> ArrayReg(bit\"0\") |> X |> Y\n\nwarning: Warning\n|> is equivalent to apply!, which means it has side effects. You need to copy original register, if you do not want to change it in-place.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#Base.kron-Tuple{Int64, Vararg{Pair{var\"#s147\", var\"#s118\"} where {var\"#s147\", var\"#s118\"<:AbstractBlock}, N} where N}","page":"Blocks","title":"Base.kron","text":"kron(n, blocks::Pair{<:Any, <:AbstractBlock}...)\n\nReturn a KronBlock, with total number of qubits n and pairs of blocks.\n\nExample\n\nUse kron to construct a KronBlock, it will put an X gate on the 1st qubit, and a Y gate on the 3rd qubit.\n\njulia> kron(4, 1=>X, 3=>Y)\nnqubits: 4\nkron\n├─ 1=>X\n└─ 3=>Y\n\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#Base.kron-Tuple{Vararg{AbstractBlock, N} where N}","page":"Blocks","title":"Base.kron","text":"kron(blocks::AbstractBlock...)\nkron(n, itr)\n\nReturn a KronBlock, with total number of qubits n, and blocks should use all the locations on n wires in quantum circuits.\n\nExample\n\nYou can use kronecker product to composite small blocks to a large blocks.\n\njulia> kron(X, Y, Z, Z)\nnqubits: 4\nkron\n├─ 1=>X\n├─ 2=>Y\n├─ 3=>Z\n└─ 4=>Z\n\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#Base.kron-Tuple{Vararg{Pair{var\"#s147\", var\"#s118\"} where {var\"#s147\", var\"#s118\"<:AbstractBlock}, N} where N}","page":"Blocks","title":"Base.kron","text":"kron(blocks...) -> f(n)\nkron(itr) -> f(n)\n\nReturn a lambda, which will take the total number of qubits as input.\n\nExample\n\nIf you don't know the number of qubit yet, or you are just too lazy, it is fine.\n\njulia> kron(put(1=>X) for _ in 1:2)\n(n -> kron(n, (n  ->  put(n, 1 => X)), (n  ->  put(n, 1 => X))))\n\njulia> kron(X for _ in 1:2)\nnqubits: 2\nkron\n├─ 1=>X\n└─ 2=>X\n\njulia> kron(1=>X, 3=>Y)\n(n -> kron(n, 1 => X, 3 => Y))\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#Base.repeat-Tuple{AbstractBlock, Any}","page":"Blocks","title":"Base.repeat","text":"repeat(x::AbstractBlock, locs)\n\nLazy curried version of repeat.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#Base.repeat-Tuple{Int64, AbstractBlock, Vararg{Int64, N} where N}","page":"Blocks","title":"Base.repeat","text":"repeat(n, x::AbstractBlock[, locs]) -> RepeatedBlock{n}\n\nCreate a RepeatedBlock with total number of qubits n and the block to repeat on given location or on all the locations.\n\nExample\n\nThis will create a repeat block which puts 4 X gates on each location.\n\njulia> repeat(4, X)\nnqubits: 4\nrepeat on (1, 2, 3, 4)\n└─ X\n\nYou can also specify the location\n\njulia> repeat(4, X, (1, 2))\nnqubits: 4\nrepeat on (1, 2)\n└─ X\n\nBut repeat won't copy the gate, thus, if it is a gate with parameter, e.g a phase(0.1), the parameter will change simultaneously.\n\njulia> g = repeat(4, phase(0.1))\nnqubits: 4\nrepeat on (1, 2, 3, 4)\n└─ phase(0.1)\n\njulia> g.content\nphase(0.1)\n\njulia> g.content.theta = 0.2\n0.2\n\njulia> g\nnqubits: 4\nrepeat on (1, 2, 3, 4)\n└─ phase(0.2)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.apply!-Tuple{AbstractRegister, AbstractBlock}","page":"Blocks","title":"YaoAPI.apply!","text":"apply!(register, block)\n\nApply a block (of quantum circuit) to a quantum register.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.chcontent-Tuple{AbstractContainer, Any}","page":"Blocks","title":"YaoAPI.chcontent","text":"chcontent(x, blk)\n\nCreate a similar block of x and change its content to blk.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.chsubblocks-Tuple{AbstractBlock, Any}","page":"Blocks","title":"YaoAPI.chsubblocks","text":"chsubblocks(composite_block, itr)\n\nChange the sub-blocks of a CompositeBlock with given iterator itr.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.content-Tuple{AbstractContainer}","page":"Blocks","title":"YaoAPI.content","text":"content(x)\n\nReturns the content of x.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.dispatch!-Tuple{Union{Nothing, Function}, AbstractBlock, Any}","page":"Blocks","title":"YaoAPI.dispatch!","text":"dispatch!(x::AbstractBlock, collection)\n\nDispatch parameters in collection to block tree x.\n\nnote: Note\nit will try to dispatch the parameters in collection first.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.expect-Union{Tuple{B}, Tuple{AbstractBlock, DensityMatrix{B, T, MT} where {T, MT<:AbstractArray{T, 3}}}} where B","page":"Blocks","title":"YaoAPI.expect","text":"expect(op::AbstractBlock, reg) -> Vector\nexpect(op::AbstractBlock, reg => circuit) -> Vector\nexpect(op::AbstractBlock, density_matrix) -> Vector\n\nGet the expectation value of an operator, the second parameter can be a register reg or a pair of input register and circuit reg => circuit.\n\nexpect'(op::AbstractBlock, reg=>circuit) -> Pair expect'(op::AbstractBlock, reg) -> AbstracRegister\n\nObtain the gradient with respect to registers and circuit parameters. For pair input, the second return value is a pair of gψ=>gparams, with gψ the gradient of input state and gparams the gradients of circuit parameters. For register input, the return value is a register.\n\nnote: Note\nFor batched register, expect(op, reg=>circuit) returns a vector of size number of batch as output. However, one can not differentiate over a vector loss, so expect'(op, reg=>circuit) accumulates the gradient over batch, rather than returning a batched gradient of parameters.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.getiparams-Tuple{AbstractBlock}","page":"Blocks","title":"YaoAPI.getiparams","text":"getiparams(block)\n\nReturns the intrinsic parameters of node block, default is an empty tuple.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.iparams_eltype-Tuple{AbstractBlock}","page":"Blocks","title":"YaoAPI.iparams_eltype","text":"iparams_eltype(block)\n\nReturn the element type of getiparams.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.mat-Tuple{AbstractBlock}","page":"Blocks","title":"YaoAPI.mat","text":"mat([T=ComplexF64], blk)\n\nReturns the matrix form of given block.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.mat-Tuple{GeneralMatrixBlock}","page":"Blocks","title":"YaoAPI.mat","text":"mat(A::GeneralMatrixBlock)\n\nReturn the matrix of general matrix block.\n\n!!!warn\n\nInstead of converting it to the default data type `ComplexF64`,\nthis will return its contained matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.occupied_locs-Tuple{AbstractBlock}","page":"Blocks","title":"YaoAPI.occupied_locs","text":"occupied_locs(x)\n\nReturn a tuple of occupied locations of x.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.operator_fidelity-Tuple{AbstractBlock, AbstractBlock}","page":"Blocks","title":"YaoAPI.operator_fidelity","text":"operator_fidelity(b1::AbstractBlock, b2::AbstractBlock) -> Number\n\nOperator fidelity defined as\n\nF^2 = frac1d^2leftrm Tr(b1^dagger b2)right\n\nHere, d is the size of the Hilbert space. Note this quantity is independant to global phase. See arXiv: 0803.2940v2, Equation (2) for reference.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.parameters-Tuple{AbstractBlock}","page":"Blocks","title":"YaoAPI.parameters","text":"parameters(block)\n\nReturns all the parameters contained in block tree with given root block.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.parameters_eltype-Tuple{AbstractBlock}","page":"Blocks","title":"YaoAPI.parameters_eltype","text":"parameters_eltype(x)\n\nReturn the element type of parameters.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.setiparams!-Tuple{AbstractBlock, Vararg{Any, N} where N}","page":"Blocks","title":"YaoAPI.setiparams!","text":"setiparams!(block, itr)\nsetiparams!(block, params...)\n\nSet the parameters of block.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.setiparams!-Tuple{Function, AbstractBlock, Any}","page":"Blocks","title":"YaoAPI.setiparams!","text":"setiparams(f, block, collection)\n\nSet parameters of block to the value in collection mapped by f.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.setiparams!-Tuple{Function, AbstractBlock, Symbol}","page":"Blocks","title":"YaoAPI.setiparams!","text":"setiparams(f, block, symbol)\n\nSet the parameters to a given symbol, which can be :zero, :random.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoAPI.subblocks-Tuple{AbstractBlock}","page":"Blocks","title":"YaoAPI.subblocks","text":"subblocks(x)\n\nReturns an iterator of the sub-blocks of a composite block. Default is empty.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.Rx-Tuple{Any}","page":"Blocks","title":"YaoBlocks.Rx","text":"Rx(theta)\n\nReturn a RotationGate on X axis.\n\nExample\n\njulia> Rx(0.1)\nrot(X, 0.1)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.Ry-Tuple{Any}","page":"Blocks","title":"YaoBlocks.Ry","text":"Ry(theta)\n\nReturn a RotationGate on Y axis.\n\nExample\n\njulia> Ry(0.1)\nrot(Y, 0.1)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.Rz-Tuple{Any}","page":"Blocks","title":"YaoBlocks.Rz","text":"Rz(theta)\n\nReturn a RotationGate on Z axis.\n\nExample\n\njulia> Rz(0.1)\nrot(Z, 0.1)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.applymatrix-Tuple{Any, AbstractBlock}","page":"Blocks","title":"YaoBlocks.applymatrix","text":"applymatrix(g::AbstractBlock) -> Matrix\n\nTransform the apply! function of specific block to dense matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.cache","page":"Blocks","title":"YaoBlocks.cache","text":"cache(x[, level=1; recursive=false])\n\nCreate a CachedBlock with given block x, which will cache the matrix of x for the first time it calls mat, and use the cached matrix in the following calculations.\n\nExample\n\njulia> cache(control(3, 1, 2=>X))\nnqubits: 3\n[cached] control(1)\n   └─ (2,) X\n\n\njulia> chain(cache(control(3, 1, 2=>X)), repeat(H))\nnqubits: 3\nchain\n├─ [cached] control(1)\n│     └─ (2,) X\n└─ repeat on (1, 2, 3)\n   └─ H\n\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.cache_key-Tuple{AbstractBlock}","page":"Blocks","title":"YaoBlocks.cache_key","text":"cache_key(block)\n\nReturns the key that identify the matrix cache of this block. By default, we use the returns of parameters as its key.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.cache_type-Tuple{Type{var\"#s4\"} where var\"#s4\"<:AbstractBlock}","page":"Blocks","title":"YaoBlocks.cache_type","text":"cache_type(::Type) -> DataType\n\nReturn the element type that a CacheFragment will use.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.chain-Tuple{Int64}","page":"Blocks","title":"YaoBlocks.chain","text":"chain(n)\n\nReturn an empty ChainBlock which can be used like a list of blocks.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.chain-Tuple{}","page":"Blocks","title":"YaoBlocks.chain","text":"chain()\n\nReturn an lambda n->chain(n).\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.chain-Union{Tuple{Vararg{AbstractBlock{N}, N1} where N1}, Tuple{N}} where N","page":"Blocks","title":"YaoBlocks.chain","text":"chain(blocks...)\n\nReturn a ChainBlock which chains a list of blocks with same nqubits. If there is lazy evaluated block in blocks, chain can infer the number of qubits and create an instance itself.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.chmeasureoperator-Union{Tuple{N}, Tuple{Measure{N, K, OT, LT, PT, RNG} where {K, OT, LT<:Union{AllLocs, Tuple{Vararg{Int64, K}}}, PT<:PostProcess, RNG}, AbstractBlock}} where N","page":"Blocks","title":"YaoBlocks.chmeasureoperator","text":"chmeasureoperator(m::Measure, op::AbstractBlock)\n\nchange the measuring operator. It will also discard existing measuring results.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.cnot-Tuple{Int64, Any, Int64}","page":"Blocks","title":"YaoBlocks.cnot","text":"cnot([n, ]ctrl_locs, location)\n\nReturn a speical ControlBlock, aka CNOT gate with number of active qubits n and locs of control qubits ctrl_locs, and location of X gate.\n\nExample\n\njulia> cnot(3, (2, 3), 1)\nnqubits: 3\ncontrol(2, 3)\n└─ (1,) X\n\njulia> cnot(2, 1)\n(n -> cnot(n, 2, 1))\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.collect_blocks-Union{Tuple{T}, Tuple{Type{T}, AbstractBlock}} where T<:AbstractBlock","page":"Blocks","title":"YaoBlocks.collect_blocks","text":"collect_blocks(block_type, root)\n\nReturn a ChainBlock with all block of block_type in root.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.control-Tuple{Any, Pair}","page":"Blocks","title":"YaoBlocks.control","text":"control(ctrl_locs, target) -> f(n)\n\nReturn a lambda that takes the number of total active qubits as input. See also control.\n\nExample\n\njulia> control((2, 3), 1=>X)\n(n -> control(n, (2, 3), 1 => X))\n\njulia> control(2, 1=>X)\n(n -> control(n, 2, 1 => X))\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.control-Tuple{Int64, Any, Pair}","page":"Blocks","title":"YaoBlocks.control","text":"control(n, ctrl_locs, target)\n\nReturn a ControlBlock with number of active qubits n and control locs ctrl_locs, and control target in Pair.\n\nExample\n\njulia> control(4, (1, 2), 3=>X)\nnqubits: 4\ncontrol(1, 2)\n└─ (3,) X\n\njulia> control(4, 1, 3=>X)\nnqubits: 4\ncontrol(1)\n└─ (3,) X\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.control-Tuple{Pair}","page":"Blocks","title":"YaoBlocks.control","text":"control(target) -> f(ctrl_locs)\n\nReturn a lambda that takes a Tuple of control qubits locs as input. See also control.\n\nExample\n\njulia> control(1=>X)\n(ctrl_locs -> control(ctrl_locs, 1 => X))\n\njulia> control((2, 3) => YaoBlocks.ConstGate.CNOT)\n(ctrl_locs -> control(ctrl_locs, (2, 3) => CNOT))\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.control-Tuple{Vararg{Int64, N} where N}","page":"Blocks","title":"YaoBlocks.control","text":"control(ctrl_locs::Int...) -> f(target)\n\nReturn a lambda that takes a Pair of control target as input. See also control.\n\nExample\n\njulia> control(1, 2)\n(target -> control((1, 2), target))\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.cunmat","page":"Blocks","title":"YaoBlocks.cunmat","text":"cunmat(nbit::Int, cbits::NTuple{C, Int}, cvals::NTuple{C, Int}, U0::AbstractMatrix, locs::NTuple{M, Int}) where {C, M} -> AbstractMatrix\n\ncontrol-unitary matrix\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.cz-Tuple{Int64, Any, Int64}","page":"Blocks","title":"YaoBlocks.cz","text":"cz([n, ]ctrl_locs, location)\n\nReturn a speical ControlBlock, aka CZ gate with number of active qubits n and locs of control qubits ctrl_locs, and location of Z gate. See also cnot.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.decode_sign-Tuple{Vararg{Int64, N} where N}","page":"Blocks","title":"YaoBlocks.decode_sign","text":"decode_sign(ctrls...)\n\nDecode signs into control sequence on control or inversed control.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.dump_gate","page":"Blocks","title":"YaoBlocks.dump_gate","text":"dump_gate(blk::AbstractBlock) -> Expr\n\nconvert a gate to a YaoScript expression for serization. The fallback is GateTypeName(fields...)\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.eigenbasis-Union{Tuple{AbstractBlock{N}}, Tuple{N}} where N","page":"Blocks","title":"YaoBlocks.eigenbasis","text":"eigenbasis(op::AbstractBlock{N})\n\nReturn the eigenvalue and eigenvectors of target operator. By applying eigenvector' to target state, one can swith the basis to the eigenbasis of this operator. However, eigenvalues does not have a specific form.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.gate_expr-Union{Tuple{G}, Tuple{Val{G}, Any, Any}} where G","page":"Blocks","title":"YaoBlocks.gate_expr","text":"gate_expr(::Val{G}, args, info)\n\nObtain the gate constructior from its YaoScript expression. G is a symbol for the gate type, the default constructor is G(args...). info contains the informations about the number of qubit and Yao version.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.getcol-Tuple{LuxurySparse.SDSparseMatrixCSC{Tv, Ti} where {Tv, Ti}, Int64}","page":"Blocks","title":"YaoBlocks.getcol","text":"getcol(csc::SDparseMatrixCSC, icol::Int) -> (View, View)\n\nget specific col of a CSC matrix, returns a slice of (rowval, nzval)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.igate-Tuple{Int64}","page":"Blocks","title":"YaoBlocks.igate","text":"igate(n::Int)\n\nThe constructor for identity gate.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.map_address","page":"Blocks","title":"YaoBlocks.map_address","text":"map_address(block::AbstractBlock, info::AddressInfo) -> AbstractBlock\n\nmap the locations in block to target locations.\n\nExample\n\nmap_address can be used to embed a sub-circuit to a larger one.\n\njulia> c = chain(5, repeat(H, 1:5), put(2=>X), kron(1=>X, 3=>Y))\nnqubits: 5\nchain\n├─ repeat on (1, 2, 3, 4, 5)\n│  └─ H\n├─ put on (2)\n│  └─ X\n└─ kron\n   ├─ 1=>X\n   └─ 3=>Y\n\n\njulia> map_address(c, AddressInfo(10, [6,7,8,9,10]))\nnqubits: 10\nchain\n├─ repeat on (6, 7, 8, 9, 10)\n│  └─ H\n├─ put on (7)\n│  └─ X\n└─ kron\n   ├─ 6=>X\n   └─ 8=>Y\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.matblock-Tuple{AbstractBlock}","page":"Blocks","title":"YaoBlocks.matblock","text":"matblock(m::AbstractMatrix)\n\nCreate a GeneralMatrixBlock with a matrix m.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.matblock-Tuple{AbstractMatrix{T} where T}","page":"Blocks","title":"YaoBlocks.matblock","text":"matblock(m::AbstractMatrix)\n\nCreate a GeneralMatrixBlock with a matrix m.\n\nExample\n\njulia> matblock(ComplexF64[0 1;1 0])\nmatblock(...)\n\n!!!warn\n\nInstead of converting it to the default data type `ComplexF64`,\nthis will return its contained matrix when calling `mat`.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.num_nonzero","page":"Blocks","title":"YaoBlocks.num_nonzero","text":"num_nonzero(nbits, nctrls, U)\n\nReturn number of nonzero entries of the matrix form of control-U gate. nbits is the number of qubits, and nctrls is the number of control qubits.\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.parameters!-Tuple{Any, AbstractBlock}","page":"Blocks","title":"YaoBlocks.parameters!","text":"parameters!(out, block)\n\nAppend all the parameters contained in block tree with given root block to out.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.parameters_range-Tuple{AbstractBlock}","page":"Blocks","title":"YaoBlocks.parameters_range","text":"parameters_range(block)\n\nReturn the range of real parameters present in block.\n\nnote: Note\nIt may not be the case that length(parameters_range(block)) == nparameters(block).\n\nExample\n\njulia> parameters_range(RotationGate(X, 0.1))\nERROR: UndefVarError: parameters_range not defined\nStacktrace:\n [1] top-level scope\n   @ none:1\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.parse_block","page":"Blocks","title":"YaoBlocks.parse_block","text":"parse_block(n, ex)\n\nThis function parse the julia object ex to a quantum block, it defines the syntax of high level interfaces. ex can be a function takes number of qubits n as input or it can be a pair.\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.phase-Tuple{Real}","page":"Blocks","title":"YaoBlocks.phase","text":"phase(theta)\n\nReturns a global phase gate. Defined with following matrix form:\n\ne^iθ mathbfI\n\nExample\n\nYou can create a global phase gate with a phase (a real number).\n\njulia> phase(0.1)\nphase(0.1)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.popdispatch!-Tuple{AbstractBlock, Vector{T} where T}","page":"Blocks","title":"YaoBlocks.popdispatch!","text":"popdispatch!(block, list)\n\nPop the first nparameters parameters of list, then dispatch them to the block tree block. See also dispatch!.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.popdispatch!-Tuple{Function, AbstractBlock, Vector{T} where T}","page":"Blocks","title":"YaoBlocks.popdispatch!","text":"popdispatch!(f, block, list)\n\nPop the first nparameters parameters of list, map them with a function f, then dispatch them to the block tree block. See also dispatch!.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.postwalk-Tuple{Union{Function, Type}, AbstractBlock}","page":"Blocks","title":"YaoBlocks.postwalk","text":"postwalk(f, src::AbstractBlock)\n\nWalk the tree and call f after the children are visited.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.prewalk-Tuple{Union{Function, Type}, AbstractBlock}","page":"Blocks","title":"YaoBlocks.prewalk","text":"prewalk(f, src::AbstractBlock)\n\nWalk the tree and call f once the node is visited.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.print_annotation-Tuple{IO, Any, Any, Any, Any}","page":"Blocks","title":"YaoBlocks.print_annotation","text":"print_annotation(io, root, node, child, k)\n\nPrint the annotation of k-th child of node, aka the k-th element of subblocks(node).\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.print_prefix-Tuple{IO, Any, Any, Any}","page":"Blocks","title":"YaoBlocks.print_prefix","text":"print_prefix(io, depth, charset, active_levels)\n\nprint prefix of a tree node in a single line.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.print_subtypetree","page":"Blocks","title":"YaoBlocks.print_subtypetree","text":"print_subtypetree(::Type[, level=1, indent=4])\n\nPrint subtype tree, level specify the depth of the tree.\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.print_title-Tuple{IO, AbstractBlock}","page":"Blocks","title":"YaoBlocks.print_title","text":"print_title(io, block)\n\nPrint the title of given block of an AbstractBlock.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.print_tree","page":"Blocks","title":"YaoBlocks.print_tree","text":"print_tree(io, root, node[, depth=1, active_levels=()]; kwargs...)\n\nPrint the block tree.\n\nKeywords\n\nmaxdepth: max tree depth to print\ncharset: default is ('├','└','│','─'). See also BlockTreeCharSet.\ntitle: control whether to print the title, true or false, default is true\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.print_tree-Tuple{Any}","page":"Blocks","title":"YaoBlocks.print_tree","text":"print_tree([io=stdout], root)\n\nPrint the block tree.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.projector-Tuple{Any}","page":"Blocks","title":"YaoBlocks.projector","text":"projector(x)\n\nReturn projector on 0 or projector on 1.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.pswap-Tuple{Int64, Int64, Int64, Real}","page":"Blocks","title":"YaoBlocks.pswap","text":"pswap(n::Int, i::Int, j::Int, α::Real)\npswap(i::Int, j::Int, α::Real) -> f(n)\n\nparametrized swap gate.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.put-Tuple{Pair}","page":"Blocks","title":"YaoBlocks.put","text":"put(pair) -> f(n)\n\nLazy curried version of put.\n\nExample\n\njulia> put(1=>X)\n(n -> put(n, 1 => X))\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.put-Union{Tuple{M}, Tuple{Int64, Pair{Tuple{Vararg{Int64, M}}, var\"#s148\"} where var\"#s148\"<:AbstractBlock}} where M","page":"Blocks","title":"YaoBlocks.put","text":"put(total::Int, pair)\n\nCreate a PutBlock with total number of active qubits, and a pair of location and block to put on.\n\nExample\n\njulia> put(4, 1=>X)\nnqubits: 4\nput on (1)\n└─ X\n\nIf you want to put a multi-qubit gate on specific locations, you need to write down all possible locations.\n\njulia> put(4, (1, 3)=>kron(X, Y))\nnqubits: 4\nput on (1, 3)\n└─ kron\n   ├─ 1=>X\n   └─ 2=>Y\n\nThe outter locations creates a scope which make it seems to be a contiguous two qubits for the block inside PutBlock.\n\ntips: Tips\nIt is better to use subroutine instead of put for large blocks, since put will use the matrix of its contents directly instead of making use of what's in it. put is more efficient for small blocks.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.rmlines-Tuple{Expr}","page":"Blocks","title":"YaoBlocks.rmlines","text":"rmlines(ex)\n\nRemove LineNumberNode from an Expr.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.rot-Tuple{AbstractBlock, Any}","page":"Blocks","title":"YaoBlocks.rot","text":"rot(U, theta)\n\nReturn a RotationGate on U axis.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.setcol!-Tuple{SparseArrays.SparseMatrixCSC, Int64, AbstractVector{T} where T, Any}","page":"Blocks","title":"YaoBlocks.setcol!","text":"setcol!(csc::SparseMatrixCSC, icol::Int, rowval::AbstractVector, nzval) -> SparseMatrixCSC\n\nset specific col of a CSC matrix\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.shift-Tuple{Any}","page":"Blocks","title":"YaoBlocks.shift","text":"shift(θ)\n\nCreate a ShiftGate with phase θ.\n\nExample\n\njulia> shift(0.1)\nshift(0.1)\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.simple_commute_eachother-Union{Tuple{Vector{var\"#s118\"} where var\"#s118\"<:AbstractBlock{N}}, Tuple{N}} where N","page":"Blocks","title":"YaoBlocks.simple_commute_eachother","text":"Return true if operators commute to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.subroutine-Tuple{AbstractBlock, Any}","page":"Blocks","title":"YaoBlocks.subroutine","text":"subroutine(block, locs) -> f(n)\n\nLazy curried version of subroutine.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.subroutine-Tuple{Int64, AbstractBlock, Any}","page":"Blocks","title":"YaoBlocks.subroutine","text":"subroutine(n, block, locs)\n\nCreate a Subroutine block with total number of current active qubits n, which concentrates given wire location together to length(locs) active qubits, and relax the concentration afterwards.\n\nExample\n\nSubroutine is equivalent to put a block on given position mathematically, but more efficient and convenient for large blocks.\n\njulia> r = rand_state(3)\nArrayReg{1, ComplexF64, Array...}\n    active qubits: 3/3\n\njulia> apply!(copy(r), subroutine(X, 1)) ≈ apply!(copy(r), put(1=>X))\ntrue\n\nIt works for in-contigious locs as well\n\njulia> r = rand_state(4)\nArrayReg{1, ComplexF64, Array...}\n    active qubits: 4/4\n\njulia> cc = subroutine(4, kron(X, Y), (1, 3))\nnqubits: 4\nSubroutine: (1, 3)\n└─ kron\n   ├─ 1=>X\n   └─ 2=>Y\n\njulia> pp = chain(4, put(1=>X), put(3=>Y))\nnqubits: 4\nchain\n├─ put on (1)\n│  └─ X\n└─ put on (3)\n   └─ Y\n\njulia> apply!(copy(r), cc) ≈ apply!(copy(r), pp)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.swap-Tuple{Int64, Int64, Int64}","page":"Blocks","title":"YaoBlocks.swap","text":"swap(n, loc1, loc2)\n\nCreate a n-qubit Swap gate which swap loc1 and loc2.\n\nExample\n\njulia> swap(4, 1, 2)\nnqubits: 4\nput on (1, 2)\n└─ SWAP\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.swap-Tuple{Int64, Int64}","page":"Blocks","title":"YaoBlocks.swap","text":"swap(loc1, loc2) -> f(n)\n\nCreate a lambda that takes the total number of active qubits as input. Lazy curried version of swap(n, loc1, loc2). See also Swap.\n\nExample\n\njulia> swap(1, 2)\n(n -> swap(n, 1, 2))\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.time_evolve-Tuple{AbstractBlock, Any}","page":"Blocks","title":"YaoBlocks.time_evolve","text":"TimeEvolution(H, dt[; tol::Real=1e-7])\n\nCreate a TimeEvolution block with Hamiltonian H and time step dt. The TimeEvolution block will use Krylove based expv to calculate time propagation.\n\nOptional keywords are tolerance tol (default is 1e-7) TimeEvolution block can also be used for imaginary time evolution if dt is complex.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.u1ij!","page":"Blocks","title":"YaoBlocks.u1ij!","text":"u1ij!(target, i, j, a, b, c, d)\n\nsingle u1 matrix into a target matrix.\n\nnote: Note\nFor coo, we take an additional parameter     * ptr: starting position to store new data.\n\n\n\n\n\n","category":"function"},{"location":"man/blocks.html#YaoBlocks.unmat-Tuple{Int64, AbstractMatrix{T} where T, Tuple{Vararg{T, N}} where {N, T}}","page":"Blocks","title":"YaoBlocks.unmat","text":"unmat(nbit::Int, U::AbstractMatrix, locs::NTuple) -> AbstractMatrix\n\nReturn the matrix representation of putting matrix at locs.\n\n\n\n\n\n","category":"method"},{"location":"man/blocks.html#YaoBlocks.@yao_str-Tuple{String}","page":"Blocks","title":"YaoBlocks.@yao_str","text":"@yao_str\nyao\"...\"\n\nThe mark up language for quantum circuit.\n\n\n\n\n\n","category":"macro"},{"location":"man/symbolic.html","page":"Symbolic Computation","title":"Symbolic Computation","text":"CurrentModule = YaoSym\nDocTestSetup = quote\n    using Yao\n    using Yao: YaoBase, YaoBlocks, YaoArrayRegister, YaoSym\n    using YaoBase\n    using YaoBlocks\n    using YaoArrayRegister\n    using YaoSym\nend","category":"page"},{"location":"man/symbolic.html#Symbolic-Computation","page":"Symbolic Computation","title":"Symbolic Computation","text":"","category":"section"},{"location":"man/symbolic.html","page":"Symbolic Computation","title":"Symbolic Computation","text":"Symbolic Computation support for Yao","category":"page"},{"location":"man/symbolic.html","page":"Symbolic Computation","title":"Symbolic Computation","text":"@ket_str\n@bra_str\n@vars\nszero_state","category":"page"},{"location":"man/symbolic.html#YaoSym.@ket_str","page":"Symbolic Computation","title":"YaoSym.@ket_str","text":"@ket_str\n\nCreate a ket register. See also @bra_str.\n\nExample\n\na symbolic quantum state can be created simply by\n\njulia> ket\"110\" + 2ket\"111\"\n|110⟩ + 2|111⟩\n\nqubits can be partially actived by focus!\n\njulia> ket\"100\" + ket\"111\" |> focus!(1:2)\n|100⟩ + |111⟩\n\n\n\n\n\n","category":"macro"},{"location":"man/symbolic.html#YaoSym.@bra_str","page":"Symbolic Computation","title":"YaoSym.@bra_str","text":"@bra_str\n\nCreate a bra register. See also @ket_str.\n\nExample\n\nSimilar to @ket_str literal, a symbolic quantum state can be created by\n\njulia> bra\"111\" + 2bra\"101\"\n2⟨101| + ⟨111|\n\njulia> bra\"111\" * (ket\"101\" + ket\"111\")\n1\n\n\n\n\n\n","category":"macro"},{"location":"dev/index.html#Developer-Notes","page":"Developer Notes","title":"Developer Notes","text":"","category":"section"},{"location":"dev/index.html#Overview-of-the-Architecture","page":"Developer Notes","title":"Overview of the Architecture","text":"","category":"section"},{"location":"dev/index.html","page":"Developer Notes","title":"Developer Notes","text":"The following is an overview of the entire ecosystem, where Yao and CuYao are two meta-packages.","category":"page"},{"location":"dev/index.html","page":"Developer Notes","title":"Developer Notes","text":"(Image: stack)","category":"page"},{"location":"dev/index.html#The-role-of-QBIR","page":"Developer Notes","title":"The role of QBIR","text":"","category":"section"},{"location":"dev/index.html","page":"Developer Notes","title":"Developer Notes","text":"Currently the main functionality is built on the Quantum Block Intermediate Representation (QBIR). A quantum program is defined by QBIR and then interpreted to different targets, such as different simulation backend or matrix representation.","category":"page"},{"location":"dev/index.html","page":"Developer Notes","title":"Developer Notes","text":"(Image: framework)","category":"page"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"CurrentModule = YaoArrayRegister\nDocTestSetup = quote\n    using Yao\n    using Yao: YaoBase, YaoBlocks, YaoArrayRegister\n    using YaoBase\n    using YaoBlocks\n    using YaoArrayRegister\nend","category":"page"},{"location":"man/array_registers.html#Array-Registers","page":"Array Registers","title":"Array Registers","text":"","category":"section"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"We provide ArrayReg as built in register type for simulations. It is a simple wrapper of a Julia array, e.g on CPU, we use Array by default and on CUDA devices we could use CuArray. You don't have to define your custom array type if the storage is array based.","category":"page"},{"location":"man/array_registers.html#Constructors","page":"Array Registers","title":"Constructors","text":"","category":"section"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"ArrayReg","category":"page"},{"location":"man/array_registers.html#YaoArrayRegister.ArrayReg","page":"Array Registers","title":"YaoArrayRegister.ArrayReg","text":"ArrayReg{B, T, MT <: AbstractMatrix{T}} <: AbstractRegister{B}\n\nSimulated full amplitude register type, it uses an array to represent corresponding one or a batch of quantum states. B is the batch size, T is the numerical type for each amplitude, it is ComplexF64 by default.\n\n\n\n\n\n","category":"type"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"We define some shortcuts to create simulated quantum states easier:","category":"page"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"product_state\nzero_state\nrand_state\nuniform_state\noneto\nrepeat","category":"page"},{"location":"man/array_registers.html#YaoArrayRegister.product_state","page":"Array Registers","title":"YaoArrayRegister.product_state","text":"product_state([T=ComplexF64], bit_str; nbatch=1)\n\nCreate an ArrayReg with bit string literal defined with @bit_str. See also zero_state, rand_state, uniform_state.\n\nExamples\n\njulia> product_state(bit\"100\"; nbatch=2)\nArrayReg{2, Complex{Float64}, Array...}\n    active qubits: 3/3\n\njulia> product_state(ComplexF32, bit\"101\"; nbatch=2)\nArrayReg{2, Complex{Float32}, Array...}\n    active qubits: 3/3\n\n\n\n\n\nproduct_state([T=ComplexF64], total::Int, bit_config::Integer; nbatch=1, no_transpose_storage=false)\n\nCreate an ArrayReg with bit configuration bit_config, total number of bits total. See also zero_state, rand_state, uniform_state.\n\nExamples\n\njulia> product_state(4, 3; nbatch=2)\nArrayReg{2, Complex{Float64}, Array...}\n    active qubits: 4/4\n\njulia> product_state(4, 0b1001; nbatch=2)\nArrayReg{2, Complex{Float64}, Array...}\n    active qubits: 4/4\n\njulia> product_state(ComplexF32, 4, 0b101)\nArrayReg{1, Complex{Float32}, Array...}\n    active qubits: 4/4\n\nwarning: Warning\nThis interface will not check whether the number of required digits for the bit configuration matches the total number of bits.\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.zero_state","page":"Array Registers","title":"YaoArrayRegister.zero_state","text":"zero_state([T=ComplexF64], n::Int; nbatch::Int=1)\n\nCreate an ArrayReg with total number of bits n. See also product_state, rand_state, uniform_state.\n\nExamples\n\njulia> zero_state(4)\nArrayReg{1, Complex{Float64}, Array...}\n    active qubits: 4/4\n\njulia> zero_state(ComplexF32, 4)\nArrayReg{1, Complex{Float32}, Array...}\n    active qubits: 4/4\n\njulia> zero_state(ComplexF32, 4; nbatch=3)\nArrayReg{3, Complex{Float32}, Array...}\n    active qubits: 4/4\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.rand_state","page":"Array Registers","title":"YaoArrayRegister.rand_state","text":"rand_state([T=ComplexF64], n::Int; nbatch=1, no_transpose_storage=false)\n\nCreate a random ArrayReg with total number of qubits n.\n\nExamples\n\njulia> rand_state(4)\nArrayReg{1, Complex{Float64}, Array...}\n    active qubits: 4/4\n\njulia> rand_state(ComplexF64, 4)\nArrayReg{1, Complex{Float64}, Array...}\n    active qubits: 4/4\n\njulia> rand_state(ComplexF64, 4; nbatch=2)\nArrayReg{2, Complex{Float64}, Array...}\n    active qubits: 4/4\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.uniform_state","page":"Array Registers","title":"YaoArrayRegister.uniform_state","text":"uniform_state([T=ComplexF64], n; nbatch=1, no_transpose_storage=false)\n\nCreate a uniform state: frac12^n sum_k k. This state can also be created by applying H (Hadmard gate) on 0000 state.\n\nExample\n\njulia> uniform_state(4; nbatch=2)\nArrayReg{2, Complex{Float64}, Array...}\n    active qubits: 4/4\n\njulia> uniform_state(ComplexF32, 4; nbatch=2)\nArrayReg{2, Complex{Float64}, Array...}\n    active qubits: 4/4\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.oneto","page":"Array Registers","title":"YaoArrayRegister.oneto","text":"oneto(r::ArrayReg, n::Int=nqubits(r))\n\nReturns an ArrayReg with 1:n qubits activated.\n\n\n\n\n\noneto(n::Int) -> f(register)\n\nLike oneto(register, n), but the input register is delayed.\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#Base.repeat","page":"Array Registers","title":"Base.repeat","text":"repeat(n, x::AbstractBlock[, locs]) -> RepeatedBlock{n}\n\nCreate a RepeatedBlock with total number of qubits n and the block to repeat on given location or on all the locations.\n\nExample\n\nThis will create a repeat block which puts 4 X gates on each location.\n\njulia> repeat(4, X)\nnqubits: 4\nrepeat on (1, 2, 3, 4)\n└─ X\n\nYou can also specify the location\n\njulia> repeat(4, X, (1, 2))\nnqubits: 4\nrepeat on (1, 2)\n└─ X\n\nBut repeat won't copy the gate, thus, if it is a gate with parameter, e.g a phase(0.1), the parameter will change simultaneously.\n\njulia> g = repeat(4, phase(0.1))\nnqubits: 4\nrepeat on (1, 2, 3, 4)\n└─ phase(0.1)\n\njulia> g.content\nphase(0.1)\n\njulia> g.content.theta = 0.2\n0.2\n\njulia> g\nnqubits: 4\nrepeat on (1, 2, 3, 4)\n└─ phase(0.2)\n\n\n\n\n\nrepeat(x::AbstractBlock, locs)\n\nLazy curried version of repeat.\n\n\n\n\n\nrepeat(register, n)\n\nCreate an ArrayReg by copying the original register for n times on batch dimension.\n\nExample\n\njulia> repeat(ArrayReg{3}(bit\"101\"), 4)\nArrayReg{12, Complex{Float64}, Array...}\n    active qubits: 3/3\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#Properties","page":"Array Registers","title":"Properties","text":"","category":"section"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"You can access the storage of an ArrayReg with:","category":"page"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"state\nstatevec\nrelaxedvec\nhypercubic\nrank3","category":"page"},{"location":"man/array_registers.html#YaoArrayRegister.state","page":"Array Registers","title":"YaoArrayRegister.state","text":"state(register::ArrayReg) -> raw array\n\nReturns the raw array storage of register. See also statevec.\n\n\n\n\n\nstate(ρ::DensityMatrix)\n\nReturn the raw state of density matrix ρ.\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.statevec","page":"Array Registers","title":"YaoArrayRegister.statevec","text":"statevec(r::ArrayReg) -> array\n\nReturn a state matrix/vector by droping the last dimension of size 1. See also state.\n\nwarning: Warning\nstatevec is not type stable. It may cause performance slow down.\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.relaxedvec","page":"Array Registers","title":"YaoArrayRegister.relaxedvec","text":"relaxedvec(r::ArrayReg) -> AbstractArray\n\nReturn a matrix (vector) for B>1 (B=1) as a vector representation of state, with all qubits activated. See also state, statevec.\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#BitBasis.hypercubic","page":"Array Registers","title":"BitBasis.hypercubic","text":"hypercubic(A::Array) -> Array\n\nget the hypercubic representation for an array.\n\n\n\n\n\nhypercubic(r::ArrayReg) -> AbstractArray\n\nReturn the hypercubic form (high dimensional tensor) of this register, only active qubits are considered. See also rank3.\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.rank3","page":"Array Registers","title":"YaoArrayRegister.rank3","text":"rank3(r::ArrayReg)\n\nReturn the rank 3 tensor representation of state, the 3 dimensions are (activated space, remaining space, batch dimension). See also rank3.\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#Operations","page":"Array Registers","title":"Operations","text":"","category":"section"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"We defined basic arithmatics for ArrayReg, besides since we do not garantee normalization for some operations on ArrayReg for simulation, normalize! and  isnormalized is provided to check and normalize the simulated register.","category":"page"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"normalize!\nisnormalized","category":"page"},{"location":"man/array_registers.html#LinearAlgebra.normalize!","page":"Array Registers","title":"LinearAlgebra.normalize!","text":"normalize!(r::ArrayReg)\n\nNormalize the register r in-place by its 2-norm.\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.isnormalized","page":"Array Registers","title":"YaoArrayRegister.isnormalized","text":"isnormalized(r::ArrayReg) -> Bool\n\nCheck if the register is normalized.\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#Specialized-Instructions","page":"Array Registers","title":"Specialized Instructions","text":"","category":"section"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"We define some specialized instruction by specializing instruct! to improve the performance for simulation and dispatch them with multiple dispatch.","category":"page"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"Implemented instruct! is listed below:","category":"page"},{"location":"man/array_registers.html#Measurement","page":"Array Registers","title":"Measurement","text":"","category":"section"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"Simulation of measurement is mainly achieved by sampling and projection.","category":"page"},{"location":"man/array_registers.html#Sample","page":"Array Registers","title":"Sample","text":"","category":"section"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"Suppose we want to measure operational subspace, we can first get","category":"page"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"p(x) = langle xpsirangle^2 = sumlimits_y L(x y )^2","category":"page"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"Then we sample an asim p(x). If we just sample and don't really measure (change wave function), its over.","category":"page"},{"location":"man/array_registers.html#Projection","page":"Array Registers","title":"Projection","text":"","category":"section"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"psirangle = sum_y L(a y )sqrtp(a) arangle yrangle","category":"page"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"Good! then we can just remove the operational qubit space since x and y spaces are totally decoupled and x is known as in state a, then we get","category":"page"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"psirangle_r = sum_y l(0 y ) yrangle","category":"page"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"where l = L(a:a, :, :)/sqrt(p(a)).","category":"page"},{"location":"man/array_registers.html#Others","page":"Array Registers","title":"Others","text":"","category":"section"},{"location":"man/array_registers.html","page":"Array Registers","title":"Array Registers","text":"Modules = [YaoArrayRegister]\nOrder = [:function]","category":"page"},{"location":"man/array_registers.html#Base.join-Union{Tuple{Vararg{ArrayReg{B, T, MT} where {T, MT<:AbstractMatrix{T}}, N} where N}, Tuple{B}} where B","page":"Array Registers","title":"Base.join","text":"join(regs...)\n\nconcat a list of registers regs to a larger register, each register should have the same batch size. See also repeat.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#Base.repeat-Union{Tuple{B}, Tuple{ArrayReg{B, T, MT} where {T, MT<:AbstractMatrix{T}}, Int64}} where B","page":"Array Registers","title":"Base.repeat","text":"repeat(register, n)\n\nCreate an ArrayReg by copying the original register for n times on batch dimension.\n\nExample\n\njulia> repeat(ArrayReg{3}(bit\"101\"), 4)\nArrayReg{12, Complex{Float64}, Array...}\n    active qubits: 3/3\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#BitBasis.hypercubic-Tuple{ArrayRegOrAdjointArrayReg{B, T, MT} where {B, T, MT}}","page":"Array Registers","title":"BitBasis.hypercubic","text":"hypercubic(r::ArrayReg) -> AbstractArray\n\nReturn the hypercubic form (high dimensional tensor) of this register, only active qubits are considered. See also rank3.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#LinearAlgebra.normalize!-Union{Tuple{ArrayReg{B, T, MT} where {T, MT<:AbstractMatrix{T}}}, Tuple{B}} where B","page":"Array Registers","title":"LinearAlgebra.normalize!","text":"normalize!(r::ArrayReg)\n\nNormalize the register r in-place by its 2-norm.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoAPI.fidelity-Union{Tuple{B2}, Tuple{B1}, Tuple{ArrayReg{B1, T, MT} where {T, MT<:AbstractMatrix{T}}, ArrayReg{B2, T, MT} where {T, MT<:AbstractMatrix{T}}}} where {B1, B2}","page":"Array Registers","title":"YaoAPI.fidelity","text":"fidelity(r1::ArrayReg, r2::ArrayReg)\n\nCalcuate the fidelity between r1 and r2, if r1 or r2 is not pure state (nactive(r) != nqubits(r)), the fidelity is calcuated by purification. See also pure_state_fidelity, purification_fidelity.\n\nfidelity'(pair_or_reg1, pair_or_reg2) -> (g1, g2)\n\nObtain the gradient with respect to registers and circuit parameters. For pair input ψ=>circuit, the returned gradient is a pair of gψ=>gparams, with gψ the gradient of input state and gparams the gradients of circuit parameters. For register input, the return value is a register.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoAPI.probs-Union{Tuple{DensityMatrix{B, T, MT} where MT<:AbstractArray{T, 3}}, Tuple{T}, Tuple{B}} where {B, T}","page":"Array Registers","title":"YaoAPI.probs","text":"probs(ρ)\n\nReturns the probability distribution from a density matrix ρ.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.contiguous_shape_orders-Tuple{Any, Any}","page":"Array Registers","title":"YaoArrayRegister.contiguous_shape_orders","text":"contiguous_shape_orders(shape, orders)\n\nMerge the shape and orders if the orders are contiguous. Returns the new merged shape and order.\n\nExample\n\njulia> YaoArrayRegister.contiguous_shape_orders((2, 3, 4), (1, 2, 3))\n([24], [1])\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.datatype-Union{Tuple{ArrayReg{B, T, MT} where MT<:AbstractMatrix{T}}, Tuple{T}, Tuple{B}} where {B, T}","page":"Array Registers","title":"YaoArrayRegister.datatype","text":"datatype(register) -> Int\n\nReturns the numerical data type used by register.\n\nnote: Note\ndatatype is not the same with eltype, since AbstractRegister family is not exactly the same with AbstractArray, it is an iterator of several registers.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.exchange_sysenv-Union{Tuple{ArrayReg{B, T, MT} where {T, MT<:AbstractMatrix{T}}}, Tuple{B}} where B","page":"Array Registers","title":"YaoArrayRegister.exchange_sysenv","text":"exchange_sysenv(reg::ArrayReg) -> ArrayReg\n\nExchange system (focused qubits) and environment (remaining qubits).\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.is_order_same-Tuple{Any}","page":"Array Registers","title":"YaoArrayRegister.is_order_same","text":"is_order_same(locs) -> Bool\n\nCheck if the order specified by locs is the same as current order.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.isnormalized-Tuple{ArrayReg}","page":"Array Registers","title":"YaoArrayRegister.isnormalized","text":"isnormalized(r::ArrayReg) -> Bool\n\nCheck if the register is normalized.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.matvec","page":"Array Registers","title":"YaoArrayRegister.matvec","text":"matvec(x::VecOrMat) -> MatOrVec\n\nReturn vector if a matrix is a column vector, else untouched.\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.move_ahead-Tuple{Any, Any}","page":"Array Registers","title":"YaoArrayRegister.move_ahead","text":"move_ahead(collection, orders)\n\nMove orders to the beginning of collection.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.mulcol!","page":"Array Registers","title":"YaoArrayRegister.mulcol!","text":"mulcol!(v::AbstractVector, i::Int, f) -> VecOrMat\n\nmultiply col i of v by f inplace.\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.mulrow!","page":"Array Registers","title":"YaoArrayRegister.mulrow!","text":"mulrow!(v::AbstractVector, i::Int, f) -> VecOrMat\n\nmultiply row i of v by f inplace.\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.oneto-Tuple{Int64}","page":"Array Registers","title":"YaoArrayRegister.oneto","text":"oneto(n::Int) -> f(register)\n\nLike oneto(register, n), but the input register is delayed.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.oneto-Union{Tuple{ArrayReg{B, T, MT} where {T, MT<:AbstractMatrix{T}}}, Tuple{B}, Tuple{ArrayReg{B, T, MT} where {T, MT<:AbstractMatrix{T}}, Int64}} where B","page":"Array Registers","title":"YaoArrayRegister.oneto","text":"oneto(r::ArrayReg, n::Int=nqubits(r))\n\nReturns an ArrayReg with 1:n qubits activated.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.product_state-Tuple{BitBasis.BitStr}","page":"Array Registers","title":"YaoArrayRegister.product_state","text":"product_state([T=ComplexF64], bit_str; nbatch=1)\n\nCreate an ArrayReg with bit string literal defined with @bit_str. See also zero_state, rand_state, uniform_state.\n\nExamples\n\njulia> product_state(bit\"100\"; nbatch=2)\nArrayReg{2, Complex{Float64}, Array...}\n    active qubits: 3/3\n\njulia> product_state(ComplexF32, bit\"101\"; nbatch=2)\nArrayReg{2, Complex{Float32}, Array...}\n    active qubits: 3/3\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.product_state-Tuple{Int64, Integer}","page":"Array Registers","title":"YaoArrayRegister.product_state","text":"product_state([T=ComplexF64], total::Int, bit_config::Integer; nbatch=1, no_transpose_storage=false)\n\nCreate an ArrayReg with bit configuration bit_config, total number of bits total. See also zero_state, rand_state, uniform_state.\n\nExamples\n\njulia> product_state(4, 3; nbatch=2)\nArrayReg{2, Complex{Float64}, Array...}\n    active qubits: 4/4\n\njulia> product_state(4, 0b1001; nbatch=2)\nArrayReg{2, Complex{Float64}, Array...}\n    active qubits: 4/4\n\njulia> product_state(ComplexF32, 4, 0b101)\nArrayReg{1, Complex{Float32}, Array...}\n    active qubits: 4/4\n\nwarning: Warning\nThis interface will not check whether the number of required digits for the bit configuration matches the total number of bits.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.rand_state-Tuple{Int64}","page":"Array Registers","title":"YaoArrayRegister.rand_state","text":"rand_state([T=ComplexF64], n::Int; nbatch=1, no_transpose_storage=false)\n\nCreate a random ArrayReg with total number of qubits n.\n\nExamples\n\njulia> rand_state(4)\nArrayReg{1, Complex{Float64}, Array...}\n    active qubits: 4/4\n\njulia> rand_state(ComplexF64, 4)\nArrayReg{1, Complex{Float64}, Array...}\n    active qubits: 4/4\n\njulia> rand_state(ComplexF64, 4; nbatch=2)\nArrayReg{2, Complex{Float64}, Array...}\n    active qubits: 4/4\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.rank3-Union{Tuple{ArrayRegOrAdjointArrayReg{B, T, MT} where {T, MT}}, Tuple{B}} where B","page":"Array Registers","title":"YaoArrayRegister.rank3","text":"rank3(r::ArrayReg)\n\nReturn the rank 3 tensor representation of state, the 3 dimensions are (activated space, remaining space, batch dimension). See also rank3.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.relaxedvec-Union{Tuple{ArrayReg{B, T, MT} where {T, MT<:AbstractMatrix{T}}}, Tuple{B}} where B","page":"Array Registers","title":"YaoArrayRegister.relaxedvec","text":"relaxedvec(r::ArrayReg) -> AbstractArray\n\nReturn a matrix (vector) for B>1 (B=1) as a vector representation of state, with all qubits activated. See also state, statevec.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.sort_unitary-Union{Tuple{N}, Tuple{AbstractMatrix{T} where T, Tuple{Vararg{Int64, N}}}} where N","page":"Array Registers","title":"YaoArrayRegister.sort_unitary","text":"sort_unitary(U, locations::NTuple{N, Int}) -> U\n\nReturn an sorted unitary operator according to the locations.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.state-Tuple{ArrayReg}","page":"Array Registers","title":"YaoArrayRegister.state","text":"state(register::ArrayReg) -> raw array\n\nReturns the raw array storage of register. See also statevec.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.state-Tuple{DensityMatrix}","page":"Array Registers","title":"YaoArrayRegister.state","text":"state(ρ::DensityMatrix)\n\nReturn the raw state of density matrix ρ.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.statevec-Tuple{ArrayRegOrAdjointArrayReg{B, T, MT} where {B, T, MT}}","page":"Array Registers","title":"YaoArrayRegister.statevec","text":"statevec(r::ArrayReg) -> array\n\nReturn a state matrix/vector by droping the last dimension of size 1. See also state.\n\nwarning: Warning\nstatevec is not type stable. It may cause performance slow down.\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.swapcols!","page":"Array Registers","title":"YaoArrayRegister.swapcols!","text":"swapcols!(v::VecOrMat, i::Int, j::Int[, f1, f2]) -> VecOrMat\n\nswap col i and col j of v inplace, with f1, f2 factors applied on i and j (before swap).\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.swaprows!","page":"Array Registers","title":"YaoArrayRegister.swaprows!","text":"swaprows!(v::VecOrMat, i::Int, j::Int[, f1, f2]) -> VecOrMat\n\nswap row i and row j of v inplace, with f1, f2 factors applied on i and j (before swap).\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.u1rows!","page":"Array Registers","title":"YaoArrayRegister.u1rows!","text":"u1rows!(state::VecOrMat, i::Int, j::Int, a, b, c, d) -> VecOrMat\n\napply u1 on row i and row j of state inplace.\n\n\n\n\n\n","category":"function"},{"location":"man/array_registers.html#YaoArrayRegister.uniform_state-Tuple{Int64}","page":"Array Registers","title":"YaoArrayRegister.uniform_state","text":"uniform_state([T=ComplexF64], n; nbatch=1, no_transpose_storage=false)\n\nCreate a uniform state: frac12^n sum_k k. This state can also be created by applying H (Hadmard gate) on 0000 state.\n\nExample\n\njulia> uniform_state(4; nbatch=2)\nArrayReg{2, Complex{Float64}, Array...}\n    active qubits: 4/4\n\njulia> uniform_state(ComplexF32, 4; nbatch=2)\nArrayReg{2, Complex{Float64}, Array...}\n    active qubits: 4/4\n\n\n\n\n\n","category":"method"},{"location":"man/array_registers.html#YaoArrayRegister.zero_state-Tuple{Int64}","page":"Array Registers","title":"YaoArrayRegister.zero_state","text":"zero_state([T=ComplexF64], n::Int; nbatch::Int=1)\n\nCreate an ArrayReg with total number of bits n. See also product_state, rand_state, uniform_state.\n\nExamples\n\njulia> zero_state(4)\nArrayReg{1, Complex{Float64}, Array...}\n    active qubits: 4/4\n\njulia> zero_state(ComplexF32, 4)\nArrayReg{1, Complex{Float32}, Array...}\n    active qubits: 4/4\n\njulia> zero_state(ComplexF32, 4; nbatch=3)\nArrayReg{3, Complex{Float32}, Array...}\n    active qubits: 4/4\n\n\n\n\n\n","category":"method"},{"location":"benchmarks.html#Benchmarks","page":"Benchmark","title":"Benchmarks","text":"","category":"section"},{"location":"benchmarks.html#Benchmark-Guard","page":"Benchmark","title":"Benchmark Guard","text":"","category":"section"},{"location":"benchmarks.html","page":"Benchmark","title":"Benchmark","text":"To ensure some PR do not contain performance regression, we defined package benchmarks with PkgBenchmark in each component package, you can run the benchmark suite and compare the performance between different version and commits.","category":"page"},{"location":"benchmarks.html#Benchmark-with-Other-Packages","page":"Benchmark","title":"Benchmark with Other Packages","text":"","category":"section"},{"location":"benchmarks.html","page":"Benchmark","title":"Benchmark","text":"We also provide benchmarks comparing to other packages, you can find a complete benchmark results here: quantum-benchmarks","category":"page"},{"location":"benchmarks.html","page":"Benchmark","title":"Benchmark","text":"a glance of Yao's benchmark comparing to other packages:","category":"page"},{"location":"benchmarks.html","page":"Benchmark","title":"Benchmark","text":"(Image: relative-gate)","category":"page"},{"location":"benchmarks.html","page":"Benchmark","title":"Benchmark","text":"(Image: relative-circuit)","category":"page"},{"location":"man/automatic_differentiation.html#Automatic-Differentiation","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"","category":"section"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"Yao currently contains builtin automatic differentiation engine (an operator overloading based) especially for quantum circuits. It uses the reversible context of quantum computation to optimize the performance during simulation, thus you may find this is way faster than any other AD engine at the moment.","category":"page"},{"location":"man/automatic_differentiation.html#Builtin-Reverse-mode-AD-engine-for-simulation","page":"Automatic Differentiation","title":"Builtin Reverse mode AD engine for simulation","text":"","category":"section"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"As for expectation, the usage is pretty simple, since the evluation of expectations are just","category":"page"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"expect(H, rand_state(10)=>circuit)","category":"page"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"to get the gradients, simply add an adjoint","category":"page"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"expect'(H, rand_state(10)=>circuit)","category":"page"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"which will return the pair of gradients, one is the gradient of input register and the other is the gradient of circuit parameters.","category":"page"},{"location":"man/automatic_differentiation.html#Forward-mode-AD-engine-(Faithful-gradient)","page":"Automatic Differentiation","title":"Forward mode AD engine (Faithful gradient)","text":"","category":"section"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"The faithful gradient is supported via an external package YaoExtensions, this packages contains some useful extensions to make things work out of the box.","category":"page"},{"location":"man/automatic_differentiation.html#Integration-with-General-purpose-AD-engine","page":"Automatic Differentiation","title":"Integration with General purpose AD engine","text":"","category":"section"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"The builtin AD engine for Yao only provides the differentiation of quantum circuits, but you can plug it into a general AD engine, such as Zygote by defining your own adjoints, or include this patch.","category":"page"},{"location":"man/automatic_differentiation.html#APIs","page":"Automatic Differentiation","title":"APIs","text":"","category":"section"},{"location":"man/automatic_differentiation.html","page":"Automatic Differentiation","title":"Automatic Differentiation","text":"Modules = [YaoBlocks.AD]\nOrder = [:function, :macro]","category":"page"},{"location":"man/automatic_differentiation.html#YaoBlocks.AD.apply_back-Tuple{Tuple{ArrayReg, ArrayReg}, AbstractBlock}","page":"Automatic Differentiation","title":"YaoBlocks.AD.apply_back","text":"apply_back(st::Tuple{<:ArrayReg, <:ArrayReg}, block::AbstractBlock; kwargs...) -> (out, outδ), paramsδ\n\nThe backward function of apply!. Returns a tuple of ((input register, gradient of input register), parameter gradients)\n\n\n\n\n\n","category":"method"},{"location":"man/automatic_differentiation.html#YaoBlocks.AD.generator-Tuple{RotationGate}","page":"Automatic Differentiation","title":"YaoBlocks.AD.generator","text":"generator(rot::Rotor) -> AbstractBlock\n\nReturn the generator of rotation block.\n\n\n\n\n\n","category":"method"},{"location":"man/automatic_differentiation.html#YaoBlocks.AD.mat_back-Union{Tuple{T}, Tuple{AbstractBlock, AbstractMatrix{T}}} where T","page":"Automatic Differentiation","title":"YaoBlocks.AD.mat_back","text":"mat_back([::Type{T}, ]block::AbstractBlock, adjm::AbstractMatrix) -> Vector\n\nThe backward function of mat. Returns the gradients of parameters.\n\n\n\n\n\n","category":"method"},{"location":"man/automatic_differentiation.html#YaoBlocks.AD.projection-Tuple{AbstractMatrix{T} where T, AbstractMatrix{T} where T}","page":"Automatic Differentiation","title":"YaoBlocks.AD.projection","text":"projection(y::AbstractMatrix, op::AbstractMatrix) -> typeof(y)\n\nProject op to sparse matrix with same sparsity as y.\n\n\n\n\n\n","category":"method"},{"location":"man/automatic_differentiation.html#YaoBlocks.AD.rotgrad-Union{Tuple{T}, Tuple{N}, Tuple{Type{T}, RotationGate{N, T, GT} where {T, GT<:AbstractBlock{N}}}} where {N, T}","page":"Automatic Differentiation","title":"YaoBlocks.AD.rotgrad","text":"The matrix gradient of a rotation block.\n\n\n\n\n\n","category":"method"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"DocTestSetup = quote\n    using Yao\n    using Yao: YaoBase, YaoBlocks, YaoArrayRegister\n    using YaoBase\n    using YaoBlocks\n    using YaoArrayRegister\nend","category":"page"},{"location":"man/extending_blocks.html#Extending-Blocks","page":"Extending Blocks","title":"Extending Blocks","text":"","category":"section"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"Blocks are defined as a sub-type system inside Julia, you could extend it by defining new Julia types by subtyping abstract types we provide. But we also provide some handy tools to help you create your own blocks.","category":"page"},{"location":"man/extending_blocks.html#Define-Custom-Constant-Blocks","page":"Extending Blocks","title":"Define Custom Constant Blocks","text":"","category":"section"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"Constant blocks are used quite often and in numerical simulation we would expect it to be a real constant in the program, which means it won't allocate new memory when we try to get its matrix for several times, and it won't change with parameters.","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"In Yao, you can simply define a constant block with @const_gate, with the corresponding matrix:","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"using YaoBlocks, BitBasis # hide\n@const_gate Rand = rand(ComplexF64, 4, 4)","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"This will automatically create a type RandGate{T} and a constant binding Rand to the instance of RandGate{ComplexF64}, and it will also bind a Julia constant for the given matrix, so when you call mat(Rand), no allocation will happen.","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"@allocated mat(Rand)","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"If you want to use other data type like ComplexF32, you could directly call Rand(ComplexF32), which will create a new instance with data type ComplexF32.","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"Rand(ComplexF32)","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"But remember this won't bind the matrix, it only binds the matrix you give","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"@allocated mat(Rand(ComplexF32))","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"so if you want to make the matrix call mat for ComplexF32 to have zero allocation as well, you need to do it explicitly.","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"@const_gate Rand::ComplexF32","category":"page"},{"location":"man/extending_blocks.html#Define-Custom-Blocks","page":"Extending Blocks","title":"Define Custom Blocks","text":"","category":"section"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"Primitive blocks are the most basic block to build a quantum circuit, if a primitive block has a certain structure, like containing tweakable parameters, it cannot be defined as a constant, thus create a new type by subtyping PrimitiveBlock is necessary","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"using YaoBlocks\n\nmutable struct PhaseGate{T <: Real} <: PrimitiveBlock{1}\n    theta::T\nend","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"If your insterested block is a composition of other blocks, you should define a CompositeBlock, e.g","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"struct ChainBlock{N} <: CompositeBlock{N}\n    blocks::Vector{AbstractBlock{N}}\nend","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"Besides types, there are several interfaces you could define for a block, but don't worry, they should just error if it doesn't work.","category":"page"},{"location":"man/extending_blocks.html#Define-the-matrix","page":"Extending Blocks","title":"Define the matrix","text":"","category":"section"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"The matrix form of a block is the minimal requirement to make a custom block functional, defining it is super simple, e.g for phase gate:","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"mat(::Type{T}, gate::PhaseGate) where T = exp(T(im * gate.theta)) * Matrix{Complex{T}}(I, 2, 2)","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"Or for composite blocks, you could just calculate the matrix by call mat on its subblocks.","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"mat(::Type{T}, c::ChainBlock) where T = prod(x->mat(T, x), reverse(c.blocks))","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"The rest will just work, but might be slow since you didn't define any specification for this certain block.","category":"page"},{"location":"man/extending_blocks.html#Define-how-blocks-are-applied-to-registers","page":"Extending Blocks","title":"Define how blocks are applied to registers","text":"","category":"section"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"Although, having its matrix is already enough for applying a block to register, we could improve the performance or dispatch to other actions by overloading apply! interface, e.g we can use specialized instruction to make X gate (a builtin gate defined @const_gate) faster:","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"function apply!(r::ArrayReg, x::XGate)\n    nactive(r) == 1 || throw(QubitMismatchError(\"register size $(nactive(r)) mismatch with block size $N\"))\n    instruct!(matvec(r.state), Val(:X), (1, ))\n    return r\nend","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"In Yao, this interface allows us to provide more aggressive specialization on different patterns of quantum circuits to accelerate the simulation etc.","category":"page"},{"location":"man/extending_blocks.html#Define-Parameters","page":"Extending Blocks","title":"Define Parameters","text":"","category":"section"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"If you want to use some member of the block to be parameters, you need to declare them explicitly","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"niparams(::Type{<:PhaseGate}) = 1\ngetiparams(x::PhaseGate) = x.theta\nsetiparams!(r::PhaseGate, param::Real) = (r.theta = param; r)","category":"page"},{"location":"man/extending_blocks.html#Define-Adjoint","page":"Extending Blocks","title":"Define Adjoint","text":"","category":"section"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"Since blocks are actually quantum operators, it makes sense to call their adjoint as well. We provide Daggered for general purpose, but some blocks may have more specific transformation rules for adjoints, e.g","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"Base.adjoint(x::PhaseGate) = PhaseGate(-x.theta)","category":"page"},{"location":"man/extending_blocks.html#Define-Cache-Keys","page":"Extending Blocks","title":"Define Cache Keys","text":"","category":"section"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"To enable cache, you should define cache_key, e.g for phase gate, we only cares about its phase, instead of the whole instance","category":"page"},{"location":"man/extending_blocks.html","page":"Extending Blocks","title":"Extending Blocks","text":"cache_key(gate::PhaseGate) = gate.theta","category":"page"},{"location":"notes.html#How-to-overload-exist-method-for-a-block","page":"How to overload exist method for a block","title":"How to overload exist method for a block","text":"","category":"section"},{"location":"notes.html","page":"How to overload exist method for a block","title":"How to overload exist method for a block","text":"every block has two method: mat & apply!, overload mat to define how to gather this block's matrix form, overload apply! to define how to apply this block to a register.","category":"page"},{"location":"notes.html","page":"How to overload exist method for a block","title":"How to overload exist method for a block","text":"Prototypes:","category":"page"},{"location":"notes.html","page":"How to overload exist method for a block","title":"How to overload exist method for a block","text":"apply!(reg, block)\nmat(block)","category":"page"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"DocTestSetup = quote\n    using Yao\n    using Yao: YaoBase, YaoBlocks, YaoArrayRegister\n    using YaoBase\n    using YaoBlocks\n    using YaoArrayRegister\nend","category":"page"},{"location":"man/registers.html#abstract_registers","page":"Abstract Registers","title":"Abstract Registers","text":"","category":"section"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"Quantum circuits process quantum states. A quantum state being processing by a quantum circuit will be stored on a quantum register. In Yao we provide several types for registers. The default type for registers is the ArrayReg which is defined in YaoArrayRegister.jl.","category":"page"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"The registers can be extended by subtyping AbstractRegister and define correspinding register interfaces defined in YaoBase.jl, which includes:","category":"page"},{"location":"man/registers.html#Minimal-Required-Interfaces","page":"Abstract Registers","title":"Minimal Required Interfaces","text":"","category":"section"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"The following interfaces are the minial required interfaces to make a register's printing work and be able to accept certain gates/blocks.","category":"page"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"But if you don't want to work with our default printing, you could define your custom printing with Base.show.","category":"page"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"YaoBase.nqubits\nYaoBase.nactive","category":"page"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"you can define instruct!, to provide specialized instructions for the registers from plain storage types.","category":"page"},{"location":"man/registers.html#Qubit-Management-Interfaces","page":"Abstract Registers","title":"Qubit Management Interfaces","text":"","category":"section"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"YaoBase.addbits!\nYaoBase.reorder!","category":"page"},{"location":"man/registers.html#Qubit-Scope-Management-Interfaces","page":"Abstract Registers","title":"Qubit Scope Management Interfaces","text":"","category":"section"},{"location":"man/registers.html#LDT-format","page":"Abstract Registers","title":"LDT format","text":"","category":"section"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"Concepturely, a wave function psirangle can be represented in a low dimentional tensor (LDT) format of order-3, L(f, r, b).","category":"page"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"f: focused (i.e. operational) dimensions\nr: remaining dimensions\nb: batch dimension.","category":"page"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"For simplicity, let's ignore batch dimension for the now, we have","category":"page"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"psirangle = sumlimits_xy L(x y ) jrangleirangle","category":"page"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"Given a configuration x (in operational space), we want get the i-th bit using (x<<i) & 0x1, which means putting the small end the qubit with smaller index. In this representation L(x) will get return langle xpsirangle.","category":"page"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"note: Note\nWhy not the other convension: Using the convention of putting 1st bit on the big end will need to know the total number of qubits n in order to know such positional information.","category":"page"},{"location":"man/registers.html#HDT-format","page":"Abstract Registers","title":"HDT format","text":"","category":"section"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"Julia storage is column major, if we reshape the wave function to a shape of 2times2times  times2 and get the HDT (high dimensional tensor) format representation H, we can use H(x_1 x_2  x_3) to get langle xpsirangle.","category":"page"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"YaoBase.focus!\nYaoBase.relax!","category":"page"},{"location":"man/registers.html#YaoAPI.focus!","page":"Abstract Registers","title":"YaoAPI.focus!","text":"focus(f, register, locs...)\n\nCall a callable f under the context of focus. See also focus!.\n\nExample\n\nprint the focused register\n\njulia> r = ArrayReg(bit\"101100\")\nArrayReg{1,Complex{Float64},Array...}\n    active qubits: 6/6\n\njulia> focus(x->(println(x);x), r, 1, 2);\nArrayReg{1,Complex{Float64},Array...}\n    active qubits: 2/6\n\n\n\n\n\nfocus!(locs...) -> f(register) -> register\n\nLazy version of focus!, this returns a lambda which requires a register.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#YaoAPI.relax!","page":"Abstract Registers","title":"YaoAPI.relax!","text":"relax!(locs::Int...; to_nactive=nqubits(register)) -> f(register) -> register\n\nLazy version of relax!, it will be evaluated once you feed a register to its output lambda.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#Measurement-Interfaces","page":"Abstract Registers","title":"Measurement Interfaces","text":"","category":"section"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"YaoBase.measure\nYaoBase.measure!\nYaoBase.measure_remove!\nYaoBase.measure_collapseto!\nYaoBase.select!","category":"page"},{"location":"man/registers.html#YaoAPI.select!","page":"Abstract Registers","title":"YaoAPI.select!","text":"select!(b::Integer) -> f(register)\n\nLazy version of select!. See also select.\n\n\n\n\n\n","category":"function"},{"location":"man/registers.html#Others","page":"Abstract Registers","title":"Others","text":"","category":"section"},{"location":"man/registers.html","page":"Abstract Registers","title":"Abstract Registers","text":"YaoBase.fidelity\nYaoBase.tracedist\nYaoBase.density_matrix\nYaoBase.viewbatch","category":"page"},{"location":"man/registers.html#YaoAPI.fidelity","page":"Abstract Registers","title":"YaoAPI.fidelity","text":"fidelity(r1::ArrayReg, r2::ArrayReg)\n\nCalcuate the fidelity between r1 and r2, if r1 or r2 is not pure state (nactive(r) != nqubits(r)), the fidelity is calcuated by purification. See also pure_state_fidelity, purification_fidelity.\n\nfidelity'(pair_or_reg1, pair_or_reg2) -> (g1, g2)\n\nObtain the gradient with respect to registers and circuit parameters. For pair input ψ=>circuit, the returned gradient is a pair of gψ=>gparams, with gψ the gradient of input state and gparams the gradients of circuit parameters. For register input, the return value is a register.\n\n\n\n\n\n","category":"function"},{"location":"man/base.html","page":"Base","title":"Base","text":"DocTestSetup = quote\n    using Yao\n    using Yao: YaoBase, YaoBlocks, YaoArrayRegister\n    using YaoBase\n    using YaoBlocks\n    using YaoArrayRegister\nend","category":"page"},{"location":"man/base.html#Base","page":"Base","title":"Base","text":"","category":"section"},{"location":"man/base.html","page":"Base","title":"Base","text":"The Base module of Yao is defined in YaoBase.jl, it provides:","category":"page"},{"location":"man/base.html","page":"Base","title":"Base","text":"the basic abstract register and its interface\nquantum information related math functions\n@interface macro for drier interface definition in Yao ecosystem\ncustom errors and assertion handling\ngeneral properties, e.g ishermitian, isunitary, etc.\ncommon constants in quantum information","category":"page"},{"location":"man/base.html#Math-Functions","page":"Base","title":"Math Functions","text":"","category":"section"},{"location":"man/base.html","page":"Base","title":"Base","text":"Modules = [YaoBase]\nPages = [\"utils/math.jl\"]","category":"page"},{"location":"man/base.html#YaoBase.autostatic-Tuple{AbstractVecOrMat{T} where T}","page":"Base","title":"YaoBase.autostatic","text":"autostatic(A[; threshold=8])\n\nStaticize dynamic array A by a threshold.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.batch_normalize","page":"Base","title":"YaoBase.batch_normalize","text":"batch_normalize\n\nnormalize a batch of vector.\n\n\n\n\n\n","category":"function"},{"location":"man/base.html#YaoBase.batch_normalize!","page":"Base","title":"YaoBase.batch_normalize!","text":"batch_normalize!(matrix)\n\nnormalize a batch of vector.\n\n\n\n\n\n","category":"function"},{"location":"man/base.html#YaoBase.density_fidelity-Tuple{AbstractMatrix{T} where T, AbstractMatrix{T} where T}","page":"Base","title":"YaoBase.density_fidelity","text":"density_fidelity(ρ1, ρ2)\n\nGeneral fidelity (including mixed states) between two density matrix for qubits.\n\nDefinition\n\nF(ρ σ)^2 = tr(ρσ) + 2 sqrtdet(ρ)det(σ)\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.general_c1_gates-Union{Tuple{Tp}, Tuple{Tg}, Tuple{Int64, Tp, Int64, Vector{Tg}, Vector{Int64}}} where {Tg<:(AbstractMatrix{T} where T), Tp<:(AbstractMatrix{T} where T)}","page":"Base","title":"YaoBase.general_c1_gates","text":"general_c1_gates(num_bit::Int, projector::AbstractMatrix, cbit::Int, gates::Vector{AbstractMatrix}, locs::Vector{Int}) -> AbstractMatrix\n\ngeneral (low performance) construction method for control gate on different lines.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.general_controlled_gates-Tuple{Int64, Vector{var\"#s16\"} where var\"#s16\"<:(AbstractMatrix{T} where T), Vector{Int64}, Vector{var\"#s15\"} where var\"#s15\"<:(AbstractMatrix{T} where T), Vector{Int64}}","page":"Base","title":"YaoBase.general_controlled_gates","text":"general_controlled_gates(num_bit::Int, projectors::Vector{Tp}, cbits::Vector{Int}, gates::Vector{AbstractMatrix}, locs::Vector{Int}) -> AbstractMatrix\n\nReturn general multi-controlled gates in hilbert space of num_bit qubits,\n\nprojectors are often chosen as P0 and P1 for inverse-Control and Control at specific position.\ncbits should have the same length as projectors, specifing the controling positions.\ngates are a list of controlled single qubit gates.\nlocs should have the same length as gates, specifing the gates positions.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.hilbertkron-Tuple{Int64, Vector{var\"#s11\"} where var\"#s11\"<:(AbstractMatrix{T} where T), Vector{Int64}}","page":"Base","title":"YaoBase.hilbertkron","text":"hilbertkron(num_bit::Int, gates::Vector{AbstractMatrix}, locs::Vector{Int}) -> AbstractMatrix\n\nReturn general kronecher product form of gates in Hilbert space of num_bit qubits.\n\ngates are a list of matrices.\nstart_locs should have the same length as gates, specifing the gates starting positions.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.linop2dense-Tuple{Function, Int64}","page":"Base","title":"YaoBase.linop2dense","text":"linop2dense([T=ComplexF64], linear_map!::Function, n::Int) -> Matrix\n\nReturns the dense matrix representation given linear map function.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.nucnorm-Tuple{AbstractMatrix{T} where T}","page":"Base","title":"YaoBase.nucnorm","text":"nucnorm(m)\n\nComputes the nuclear norm of a matrix m.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.pure_state_fidelity-Tuple{Vector{T} where T, Vector{T} where T}","page":"Base","title":"YaoBase.pure_state_fidelity","text":"pure_state_fidelity(v1::Vector, v2::Vector)\n\nfidelity for pure states.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.purification_fidelity-Tuple{Matrix{T} where T, Matrix{T} where T}","page":"Base","title":"YaoBase.purification_fidelity","text":"purification_fidelity(m1::Matrix, m2::Matrix)\n\nFidelity for mixed states via purification.\n\nReference:     http://iopscience.iop.org/article/10.1088/1367-2630/aa6a4b/meta\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.rand_hermitian-Tuple{Int64}","page":"Base","title":"YaoBase.rand_hermitian","text":"rand_hermitian([T=ComplexF64], N::Int) -> Matrix\n\nCreate a random hermitian matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.rand_unitary-Tuple{Int64}","page":"Base","title":"YaoBase.rand_unitary","text":"rand_unitary([T=ComplexF64], N::Int) -> Matrix\n\nCreate a random unitary matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.rotmat-Tuple{AbstractMatrix{T} where T, Real}","page":"Base","title":"YaoBase.rotmat","text":"rotmat(M::AbstractMatrix, θ::Real)\n\nReturns rotated M: exp(-fracimθ2 M).\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.sprand_hermitian-Tuple{Int64, Any}","page":"Base","title":"YaoBase.sprand_hermitian","text":"sprand_hermitian([T=ComplexF64], N, density)\n\nCreate a sparse random hermitian matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.sprand_unitary-Tuple{Int64, Real}","page":"Base","title":"YaoBase.sprand_unitary","text":"sprand_unitary([T=ComplexF64], N::Int, density) -> SparseMatrixCSC\n\nCreate a random sparse unitary matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.trnorm-Tuple{AbstractMatrix{T} where T}","page":"Base","title":"YaoBase.trnorm","text":"trnorm(m)\n\nComputes the trace norm of a matrix m.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#General-Properties","page":"Base","title":"General Properties","text":"","category":"section"},{"location":"man/base.html","page":"Base","title":"Base","text":"Modules = [YaoBase]\nPages = [\"inspect.jl\"]","category":"page"},{"location":"man/base.html#LinearAlgebra.ishermitian-Tuple{Any}","page":"Base","title":"LinearAlgebra.ishermitian","text":"ishermitian(op) -> Bool\n\ncheck if this operator is hermitian.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#Error-and-Exceptions","page":"Base","title":"Error and Exceptions","text":"","category":"section"},{"location":"man/base.html","page":"Base","title":"Base","text":"Modules = [YaoBase]\nPages = [\"error.jl\"]","category":"page"},{"location":"man/base.html#YaoBase.islocs_conflict-Tuple{Union{Vector{T}, Tuple{Vararg{T, N}} where N} where T}","page":"Base","title":"YaoBase.islocs_conflict","text":"islocs_conflict(locs) -> Bool\n\nCheck if the input locations has conflicts.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.islocs_inbounds-Tuple{Int64, Union{Vector{T}, Tuple{Vararg{T, N}} where N} where T}","page":"Base","title":"YaoBase.islocs_inbounds","text":"islocs_inbounds(n, locs) -> Bool\n\nCheck if the input locations are inside given bounds n.\n\n\n\n\n\n","category":"method"},{"location":"man/base.html#YaoBase.@assert_locs_inbounds-Tuple{Any, Any, Vararg{Any, N} where N}","page":"Base","title":"YaoBase.@assert_locs_inbounds","text":"@assert_locs_inbounds <number of total qubits> <locations list> [<msg>]\n\nAssert if all the locations are inbounds.\n\n\n\n\n\n","category":"macro"},{"location":"man/base.html#YaoBase.@assert_locs_safe-Tuple{Any, Any, Vararg{Any, N} where N}","page":"Base","title":"YaoBase.@assert_locs_safe","text":"@assert_locs_safe <number of total qubits> <locations list> [<msg>]\n\nAssert if all the locations are:     - inbounds.     - do not have any conflict.\n\n\n\n\n\n","category":"macro"},{"location":"man/base.html#Constants","page":"Base","title":"Constants","text":"","category":"section"},{"location":"man/base.html","page":"Base","title":"Base","text":"using Latexify, YaoBase\nconst_list = filter(x->x!==:Const, names(Const))\nname_list = map(string, const_list)\nmdtable(name_list; head=[\"defined constants\"])","category":"page"},{"location":"man/bitbasis.html","page":"BitBasis","title":"BitBasis","text":"DocTestSetup = quote\n    using Yao\n    using Yao: YaoBase, YaoBlocks, YaoArrayRegister\n    using YaoBase\n    using YaoBlocks\n    using YaoArrayRegister\nend","category":"page"},{"location":"man/bitbasis.html#BitBasis","page":"BitBasis","title":"BitBasis","text":"","category":"section"},{"location":"man/bitbasis.html","page":"BitBasis","title":"BitBasis","text":"Types and operations for basis represented by bits in linear algebra.","category":"page"},{"location":"man/bitbasis.html","page":"BitBasis","title":"BitBasis","text":"For more details please ref to BitBasis.jl.","category":"page"},{"location":"man/bitbasis.html","page":"BitBasis","title":"BitBasis","text":"Modules = [BitBasis]\nOrder = [:macro, :function, :type, :module]","category":"page"},{"location":"man/bitbasis.html#BitBasis.@bit_str-Tuple{Any}","page":"BitBasis","title":"BitBasis.@bit_str","text":"@bit_str -> BitStr64\n\nConstruct a bit string. such as bit\"0000\". The bit strings also supports string bcat. Just use it like normal strings.\n\nExample\n\njulia> bit\"10001\"\n10001 ₍₂₎\n\njulia> bit\"100_111_101\"\n100111101 ₍₂₎\n\njulia> bcat(bit\"1001\", bit\"11\", bit\"1110\")\n1001111110 ₍₂₎\n\njulia> onehot(bit\"1001\")\n16-element Array{Float64,1}:\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 1.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n\n\n\n\n\n\n","category":"macro"},{"location":"man/bitbasis.html#BitBasis.@lbit_str-Tuple{Any}","page":"BitBasis","title":"BitBasis.@lbit_str","text":"@bit_str -> LongBitStr\n\nLong bit string version of @bit_str macro.\n\n\n\n\n\n","category":"macro"},{"location":"man/bitbasis.html#BitBasis.allone-Union{Tuple{T}, Tuple{T, T}} where T<:Integer","page":"BitBasis","title":"BitBasis.allone","text":"allone(index::Integer, mask::Integer) -> Bool\n\nReturn true if all masked position of index is 1.\n\nExample\n\ntrue if all masked positions are 1.\n\njulia> allone(0b1011, 0b1011)\ntrue\n\njulia> allone(0b1011, 0b1001)\ntrue\n\njulia> allone(0b1011, 0b0100)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.anyone-Union{Tuple{T}, Tuple{T, T}} where T<:Integer","page":"BitBasis","title":"BitBasis.anyone","text":"anyone(index::Integer, mask::Integer) -> Bool\n\nReturn true if any masked position of index is 1.\n\nExample\n\ntrue if any masked positions is 1.\n\njulia> anyone(0b1011, 0b1001)\ntrue\n\njulia> anyone(0b1011, 0b1100)\ntrue\n\njulia> anyone(0b1011, 0b0100)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.baddrs-Tuple{Integer}","page":"BitBasis","title":"BitBasis.baddrs","text":"baddrs(b::Integer) -> Vector\n\nget the locations of nonzeros bits, i.e. the inverse operation of bmask.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.basis-Tuple{Union{Int64, AbstractArray}}","page":"BitBasis","title":"BitBasis.basis","text":"basis([IntType], nbits::Int) -> UnitRange{IntType}\nbasis([IntType], state::AbstractArray) -> UnitRange{IntType}\n\nReturns the UnitRange for basis in Hilbert Space of nbits qubits. If an array is supplied, it will return a basis having the same size with the first diemension of array.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bdistance-Union{Tuple{Ti}, Tuple{Ti, Ti}} where Ti<:Integer","page":"BitBasis","title":"BitBasis.bdistance","text":"bdistance(i::Integer, j::Integer) -> Int\n\nReturn number of different bits.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bfloat-Tuple{Integer}","page":"BitBasis","title":"BitBasis.bfloat","text":"bfloat(b::Integer; nbits::Int=bit_length(b)) -> Float64\n\nfloat view, with current bit numbering. See also bfloat_r.\n\nRef: wiki: bit numbering\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bfloat-Union{Tuple{BitBasis.BitStr{N, T} where T}, Tuple{N}} where N","page":"BitBasis","title":"BitBasis.bfloat","text":"bfloat(b::BitStr) -> Float64\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bfloat_r-Tuple{Integer}","page":"BitBasis","title":"BitBasis.bfloat_r","text":"bfloat_r(b::Integer; nbits::Int=bit_length(b)) -> Float64\n\nfloat view, with reversed bit numbering. See also bfloat.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bfloat_r-Union{Tuple{BitBasis.BitStr{N, T} where T}, Tuple{N}} where N","page":"BitBasis","title":"BitBasis.bfloat_r","text":"bfloat_r(b::BitStr) -> Float64\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bint-Tuple{BitBasis.BitStr}","page":"BitBasis","title":"BitBasis.bint","text":"bint(b::BitStr) -> Integer\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bint-Tuple{Integer}","page":"BitBasis","title":"BitBasis.bint","text":"bint(b; nbits=nothing) -> Int\n\ninteger view, with LSB 0 bit numbering. See also wiki: bit numbering\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bint_r-Tuple{Integer}","page":"BitBasis","title":"BitBasis.bint_r","text":"bint_r(b; nbits::Int) -> Integer\n\ninteger read in inverse order.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bint_r-Union{Tuple{BitBasis.BitStr{N, T} where T}, Tuple{N}} where N","page":"BitBasis","title":"BitBasis.bint_r","text":"bint_r(b::BitStr) -> Integer\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bit_length-Tuple{Integer}","page":"BitBasis","title":"BitBasis.bit_length","text":"bit_length(x::Integer) -> Int\n\nReturn the number of bits required to represent input integer x.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bit_literal-Tuple{Vararg{Int64, N} where N}","page":"BitBasis","title":"BitBasis.bit_literal","text":"bit_literal(xs...)\n\nCreate a BitStr by input bits xs.\n\nExample\n\njulia> bit_literal(1, 0, 1, 0, 1, 1)\n110101 ₍₂₎\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bitarray-Union{Tuple{T}, Tuple{Vector{T}, Int64}} where T<:Number","page":"BitBasis","title":"BitBasis.bitarray","text":"bitarray(v::Vector, [nbits::Int]) -> BitArray\nbitarray(v::Int, nbits::Int) -> BitArray\nbitarray(nbits::Int) -> Function\n\nConstruct BitArray from an integer vector, if nbits not supplied, it is 64. If an integer is supplied, it returns a function mapping a Vector/Int to bitarray.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bmask","page":"BitBasis","title":"BitBasis.bmask","text":"bmask(::Type{T}) where T <: Integer -> zero(T)\nbmask([T::Type], positions::Int...) -> T\nbmask([T::Type], range::UnitRange{Int}) -> T\n\nReturn an integer mask of type T where 1 is the position masked according to positions or range. Directly use T will return an empty mask 0.\n\n\n\n\n\n","category":"function"},{"location":"man/bitbasis.html#BitBasis.breflect","page":"BitBasis","title":"BitBasis.breflect","text":"breflect(b::Integer[, masks::Vector{Integer}]; nbits) -> Integer\n\nReturn left-right reflected integer.\n\nExample\n\nReflect the order of bits.\n\njulia> breflect(0b1011; nbits=4) == 0b1101\ntrue\n\n\n\n\n\n","category":"function"},{"location":"man/bitbasis.html#BitBasis.breflect-Union{Tuple{BitBasis.BitStr{N, T} where T}, Tuple{N}} where N","page":"BitBasis","title":"BitBasis.breflect","text":"breflect(bit_str[, masks])\n\nReturn left-right reflected bit string.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.bsizeof-Union{Tuple{Type{T}}, Tuple{T}} where T","page":"BitBasis","title":"BitBasis.bsizeof","text":"bsizeof(::Type)\n\nReturns the size of given type in number of binary digits.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.btruncate-Tuple{Integer, Any}","page":"BitBasis","title":"BitBasis.btruncate","text":"btruncate(b, n)\n\nTruncate bits b to given length n.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.controldo-Union{Tuple{S}, Tuple{Union{Function, Type}, BitBasis.IterControl{S}}} where S","page":"BitBasis","title":"BitBasis.controldo","text":"controldo(f, itr::IterControl)\n\nExecute f while iterating itr.\n\nnote: Note\nthis is faster but equivalent than using itr as an iterator. See also itercontrol.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.controller-Tuple{Union{UnitRange{Int64}, Int64, Tuple{Vararg{Int64, var\"#s3\"}} where var\"#s3\", Vector{Int64}}, Union{UnitRange{Int64}, Int64, Tuple{Vararg{Int64, var\"#s3\"}} where var\"#s3\", Vector{Int64}}}","page":"BitBasis","title":"BitBasis.controller","text":"controller(cbits, cvals) -> Function\n\nReturn a function that checks whether a basis at cbits takes specific value cvals.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.flip-Union{Tuple{T}, Tuple{T, T}} where T<:Integer","page":"BitBasis","title":"BitBasis.flip","text":"flip(index::Integer, mask::Integer) -> Integer\n\nReturn an Integer with bits at masked position flipped.\n\nExample\n\njulia> flip(0b1011, 0b1011) |> bit(len=4)\n0000 (0)\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.group_shift!-Tuple{Int64, AbstractVector{Int64}}","page":"BitBasis","title":"BitBasis.group_shift!","text":"group_shift!(nbits, positions)\n\nShift bits on positions together.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.hypercubic-Tuple{Array}","page":"BitBasis","title":"BitBasis.hypercubic","text":"hypercubic(A::Array) -> Array\n\nget the hypercubic representation for an array.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.indices_with-Tuple{Int64, Vector{Int64}, Vector{Int64}}","page":"BitBasis","title":"BitBasis.indices_with","text":"indices_with(n::Int, locs::Vector{Int}, vals::Vector{Int}) -> Vector{Int}\n\nReturn indices with specific positions locs with value vals in a hilbert space of n qubits.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.invorder-Tuple{AbstractVecOrMat{T} where T}","page":"BitBasis","title":"BitBasis.invorder","text":"invorder(X::AbstractVecOrMat)\n\nInverse the order of given vector/matrix X.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.ismatch-Union{Tuple{T}, Tuple{T, T, T}} where T<:Integer","page":"BitBasis","title":"BitBasis.ismatch","text":"ismatch(index::Integer, mask::Integer, target::Integer) -> Bool\n\nReturn true if bits at positions masked by mask equal to 1 are equal to target.\n\nExample\n\njulia> n = 0b11001; mask = 0b10100; target = 0b10000;\n\njulia> ismatch(n, mask, target)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.log2dim1-Tuple{Any}","page":"BitBasis","title":"BitBasis.log2dim1","text":"log2dim1(X)\n\nReturns the log2 of the first dimension's size.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.log2i","page":"BitBasis","title":"BitBasis.log2i","text":"log2i(x::Integer) -> Integer\n\nReturn log2(x), this integer version of log2 is fast but only valid for number equal to 2^n.\n\n\n\n\n\n","category":"function"},{"location":"man/bitbasis.html#BitBasis.neg-Union{Tuple{BitBasis.BitStr{N, T} where T}, Tuple{N}} where N","page":"BitBasis","title":"BitBasis.neg","text":"neg(b::BitStr) -> BitStr\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.neg-Union{Tuple{T}, Tuple{T, Int64}} where T<:Integer","page":"BitBasis","title":"BitBasis.neg","text":"neg(index::Integer, nbits::Int) -> Integer\n\nReturn an integer with all bits flipped (with total number of bit nbits).\n\nExample\n\njulia> neg(0b1111, 4) |> bit(len=4)\n0000 (0)\n\njulia> neg(0b0111, 4) |> bit(len=4)\n1000 (8)\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.next_reordered_basis-Union{Tuple{T}, Tuple{N}, Tuple{T, Tuple{Vararg{T, N}}, Tuple{Vararg{T, N}}}} where {N, T}","page":"BitBasis","title":"BitBasis.next_reordered_basis","text":"next_reordered_basis(basis, takers, differ)\n\nReturns the next reordered basis accroding to current basis.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.onehot-Union{Tuple{N}, Tuple{T}, Tuple{Type{T}, BitBasis.BitStr{N, T} where T}} where {T, N}","page":"BitBasis","title":"BitBasis.onehot","text":"onehot([T=Float64], bit_str[, nbatch])\n\nReturns an onehot vector in type Vector{T}, or a batch of onehot vector in type Matrix{T}, where the bit_str-th element is one.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.onehot-Union{Tuple{T}, Tuple{Type{T}, Int64, Integer}} where T","page":"BitBasis","title":"BitBasis.onehot","text":"onehot([T=Float64], nbits, x::Integer; nbatch::Int])\n\nCreate an onehot vector in type Vector{T} or a batch of onehot vector in type Matrix{T}, where index x + 1 is one.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.packbits-Tuple{AbstractVector{T} where T}","page":"BitBasis","title":"BitBasis.packbits","text":"packbits(arr::AbstractArray) -> AbstractArray\n\npack bits to integers, usually take a BitArray as input.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.readbit-Union{Tuple{T}, Tuple{T, Int64}} where T<:Integer","page":"BitBasis","title":"BitBasis.readbit","text":"readbit(x, loc...)\n\nRead the bit config at given location.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.reorder","page":"BitBasis","title":"BitBasis.reorder","text":"reorder(X::AbstractArray, orders)\n\nReorder X according to orders.\n\ntip: Tip\nAlthough orders can be any iterable, Tuple is preferred inorder to gain as much performance as possible. But the conversion won't take much anyway.\n\n\n\n\n\n","category":"function"},{"location":"man/bitbasis.html#BitBasis.setbit-Union{Tuple{T}, Tuple{T, T}} where T<:Integer","page":"BitBasis","title":"BitBasis.setbit","text":"setbit(index::Integer, mask::Integer) -> Integer\n\nset the bit at masked position to 1.\n\nExample\n\njulia> setbit(0b1011, 0b1100) |> bit(len=4)\n1111 (15)\n\njulia> setbit(0b1011, 0b0100) |> bit(len=4)\n1111 (15)\n\njulia> setbit(0b1011, 0b0000) |> bit(len=4)\n1011 (11)\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.swapbits-Union{Tuple{T}, Tuple{T, Int64, Int64}} where T<:Integer","page":"BitBasis","title":"BitBasis.swapbits","text":"swapbits(n::Integer, mask_ij::Integer) -> Integer\nswapbits(n::Integer, i::Int, j::Int) -> Integer\n\nReturn an integer with bits at i and j flipped.\n\nExample\n\njulia> swapbits(0b1011, 0b1100) == 0b0111\ntrue\n\ntip: Tip\nlocations i and j specified by mask could be faster when bmask is not straight forward but known by constant.\n\nwarning: Warning\nmask_ij should only contain two 1, swapbits will not check it, use at your own risk.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.unsafe_reorder","page":"BitBasis","title":"BitBasis.unsafe_reorder","text":"unsafe_reorder(X::AbstractArray, orders)\n\nReorder X according to orders.\n\nwarning: Warning\nunsafe_reorder won't check whether the length of orders and the size of first dimension of X match, use at your own risk.\n\n\n\n\n\n","category":"function"},{"location":"man/bitbasis.html#BitBasis.unsafe_sub-Union{Tuple{T}, Tuple{N}, Tuple{UnitRange{T}, Tuple{Vararg{T, N}}}} where {N, T}","page":"BitBasis","title":"BitBasis.unsafe_sub","text":"unsafe_sub(a::UnitRange, b::NTuple{N}) -> NTuple{N}\n\nReturns result in type Tuple of a .- b. This will not check the length of a and b, use at your own risk.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.unsafe_sub-Union{Tuple{T}, Tuple{UnitRange{T}, Vector{T}}} where T","page":"BitBasis","title":"BitBasis.unsafe_sub","text":"unsafe_sub(a::UnitRange{T}, b::Vector{T}) where T\n\nReturns a .- b, fallback version when b is a Vector.\n\n\n\n\n\n","category":"method"},{"location":"man/bitbasis.html#BitBasis.BitStr","page":"BitBasis","title":"BitBasis.BitStr","text":"BitStr{N,T} <: Integer\n\nstruct for bit string with fixed length N, the storage type is T.\n\nBitStr{N,T}(value)\nBitStr64{N}(value)\nLongBitStr{N}(value)\n\nReturns a BitStr.\n\nExample\n\nBitStr supports some basic arithmetic operations. It acts like an integer, but supports some frequently used methods for binary basis.\n\njulia> bit\"0101\" * 2\n1010 ₍₂₎\n\njulia> bcat(bit\"101\" for i in 1:10)\n101101101101101101101101101101 (766958445)\n\njulia> repeat(bit\"101\", 2)\n101101 ₍₂₎\n\njulia> bit\"1101\"[2]\n0\n\n\n\n\n\n","category":"type"},{"location":"man/bitbasis.html#BitBasis.IterControl","page":"BitBasis","title":"BitBasis.IterControl","text":"IterControl{S}\nIterControl(n::Int, base::Int, masks, ks) -> IterControl\n\nIterator to iterate through controlled subspace. See also itercontrol.  S is the number of shifts,  n is the size of Hilbert space,  base is the base of counter,  masks and ks are helpers for enumerating over the target Hilbert Space.\n\n\n\n\n\n","category":"type"},{"location":"man/bitbasis.html#BitBasis.ReorderedBasis","page":"BitBasis","title":"BitBasis.ReorderedBasis","text":"ReorderedBasis{N, T}\n\nLazy reorderd basis.\n\n\n\n\n\n","category":"type"},{"location":"man/bitbasis.html#BitBasis.ReorderedBasis-Union{Tuple{Tuple{Vararg{T, N}}}, Tuple{T}, Tuple{N}} where {N, T<:Integer}","page":"BitBasis","title":"BitBasis.ReorderedBasis","text":"ReorderedBasis(orders::NTuple{N, <:Integer})\n\nReturns a lazy set of reordered basis.\n\n\n\n\n\n","category":"method"},{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = Yao","category":"page"},{"location":"index.html#Yao","page":"Home","title":"Yao","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"A General Purpose Quantum Computation Simulation Framework","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Welcome to Yao, a Flexible, Extensible, Efficient Framework for Quantum Algorithm Design. Yao (幺) is the Chinese character for normalized but not orthogonal.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"We aim to provide a powerful tool for researchers, students to study and explore quantum computing in near term future, before quantum computer being used in large-scale.","category":"page"},{"location":"index.html#Manual","page":"Home","title":"Manual","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Pages = [\n    \"man/array_registers.md\",\n    \"man/blocks.md\",\n    \"man/base.md\",\n    \"man/registers.md\",\n    \"man/extending_blocks.md\",\n]\nDepth = 1","category":"page"},{"location":"man/simplification.html#Simplification","page":"Simplification","title":"Simplification","text":"","category":"section"},{"location":"man/simplification.html","page":"Simplification","title":"Simplification","text":"The simplification for YaoBlocks is currently implemented in a limited and straightforward fashion, there is only one interface simplify to call.","category":"page"},{"location":"man/simplification.html#APIs","page":"Simplification","title":"APIs","text":"","category":"section"},{"location":"man/simplification.html","page":"Simplification","title":"Simplification","text":"Modules = [YaoBlocks.Optimise]\nOrder = [:function, :macro]","category":"page"},{"location":"man/simplification.html#YaoBlocks.Optimise.is_pauli-Tuple{T} where T","page":"Simplification","title":"YaoBlocks.Optimise.is_pauli","text":"is_pauli(x)\n\nCheck if x is an element of pauli group.\n\nnote: Note\nthis function is just a binding of SimpleTraits.istrait, it will not work if the type is not registered as a trait with @traitimpl.\n\n\n\n\n\n","category":"method"},{"location":"man/simplification.html#YaoBlocks.Optimise.replace_block-Tuple{Any, AbstractBlock}","page":"Simplification","title":"YaoBlocks.Optimise.replace_block","text":"replace_block(actor, tree::AbstractBlock) -> AbstractBlock\nreplace_block(pair::Pair{Type{ST}, TT}, tree::AbstractBlock) -> AbstractBlock\n\nreplace blocks in a circuit, where actor is a function that given input block, returns the block to replace, or nothing for skip replacing and visit sibling. If pair is provided, then replace original block with type ST with new block (pair.second).\n\n\n\n\n\n","category":"method"},{"location":"man/simplification.html#YaoBlocks.Optimise.simplify-Tuple{AbstractBlock}","page":"Simplification","title":"YaoBlocks.Optimise.simplify","text":"simplify(block[; rules=__default_simplification_rules__])\n\nSimplify a block tree accroding to given rules, default to use __default_simplification_rules__.\n\n\n\n\n\n","category":"method"},{"location":"man/simplification.html#YaoBlocks.Optimise.to_basictypes","page":"Simplification","title":"YaoBlocks.Optimise.to_basictypes","text":"to_basictypes(block::AbstractBlock{N}) where N\n\nconvert gates to basic types\n\n* ChainBlock\n* PutBlock\n* PrimitiveBlock\n\n\n\n\n\n","category":"function"}]
}
